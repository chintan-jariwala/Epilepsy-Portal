'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');

/**
 * Mock sequelize
 * @returns {Object} mocked sequelize object
 */
function mockSequelize() {
    // stub properties
    var model = sinon.stub();
    var transaction = sinon.stub();

    model.withArgs('trial').returns({
        find: function find() {
            return _promise2.default.resolve({});
        },
        create: function create() {
            return _promise2.default.resolve({
                id: 1,
                addStages: function addStages() {
                    return _promise2.default.resolve();
                }
            });
        }
    });

    model.withArgs('stage').returns({
        find: function find() {
            return _promise2.default.resolve({});
        },
        create: function create() {
            return _promise2.default.resolve();
        }
    });

    transaction.returns(_promise2.default.resolve({
        commit: sinon.stub(),
        rollback: sinon.stub()
    }));

    return { model: model, transaction: transaction };
}

test.cb('when a trial is created', function (t) {
    var sequelize = mockSequelize();

    var createTrial = proxyquire('../handler/create-trial', {
        '../../model': { sequelize: sequelize }
    });

    var request = {
        log: sinon.stub(),
        payload: {
            name: 'test',
            description: 'test',
            IRBID: 'test',
            IRBStart: '2000-01-01',
            IRBEnd: '2001-01-01',
            targetCount: 10,
            stagecount: 3,
            stageName: 'one,two,three'
        }
    };

    var reply = {
        redirect: function redirect(route) {
            var _rec = new _powerAssertRecorder();

            t.is(_rec._expr(_rec._capt(route, 'arguments/0'), {
                content: 't.is(route, \'/trial/1\', \'it should redirect to the new trial\')',
                filepath: 'controller/handler-test/create-trial.js',
                line: 74
            }), '/trial/1', 'it should redirect to the new trial');
            t.end();
        }
    };

    createTrial(request, reply);
});

test.cb('when stage number does not match', function (t) {
    var sequelize = mockSequelize();

    var createTrial = proxyquire('../handler/create-trial', {
        '../../model': { sequelize: sequelize }
    });

    var request = {
        log: sinon.stub(),
        payload: {
            name: 'test',
            description: 'test',
            IRBID: 'test',
            IRBStart: '2000-01-01',
            IRBEnd: '2001-01-01',
            targetCount: 10,
            stagecount: 3,
            stageName: 'one,two'
        }
    };

    var reply = function reply(data) {
        var _rec2 = new _powerAssertRecorder();

        t.is(_rec2._expr(_rec2._capt(_rec2._capt(data, 'arguments/0/object').name, 'arguments/0'), {
            content: 't.is(data.name, \'Error\', \'it should have an Error object\')',
            filepath: 'controller/handler-test/create-trial.js',
            line: 104
        }), 'Error', 'it should have an Error object');
        t.end();
    };

    createTrial(request, reply);
});
//# sourceMappingURL=../../node_modules/.cache/ava/dbb31335386c255965d3d7a5bdf03628.js.map