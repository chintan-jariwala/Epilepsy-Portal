'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');
var QueryTypes = {
    SELECT: 'select'
};

test.cb('when patient has no surveys', function (t) {
    var query = sinon.stub();

    query.returns(_promise2.default.resolve([]));

    var patientCSV = proxyquire('../handler/patient-csv', {
        boom: sinon.stub(),
        '../../model': {
            sequelize: { query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            pin: 1
        }
    };

    var reply = function reply(data) {
        var _rec = new _powerAssertRecorder();

        t.is(_rec._expr(_rec._capt(data, 'arguments/0'), {
            content: 't.is(data, \'patient pin,survey name,unique survey id,unique question id,question,question option\\n\', \'it should show the headers with no data\')',
            filepath: 'controller/handler-test/patient-csv.js',
            line: 30
        }), 'patient pin,survey name,unique survey id,unique question id,question,question option\n', 'it should show the headers with no data');

        return {
            type: function type(_type) {
                var _rec2 = new _powerAssertRecorder();

                t.is(_rec2._expr(_rec2._capt(_type, 'arguments/0'), {
                    content: 't.is(type, \'text/csv\', \'it should sent in csv format\')',
                    filepath: 'controller/handler-test/patient-csv.js',
                    line: 38
                }), 'text/csv', 'it should sent in csv format');
                t.end();
            }
        };
    };

    patientCSV(request, reply);
});

test.cb('when patient doesn\'t exist', function (t) {
    var query = sinon.stub();

    query.returns(_promise2.default.reject([]));

    var patientCSV = proxyquire('../handler/patient-csv', {
        '../../model': {
            sequelize: { query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            pin: Number.NaN
        }
    };

    var reply = function reply(data) {
        var _rec3 = new _powerAssertRecorder();

        t.is(_rec3._expr(_rec3._capt(_rec3._capt(data, 'arguments/0/object').name, 'arguments/0'), {
            content: 't.is(data.name, \'Error\', \'it should have error object\')',
            filepath: 'controller/handler-test/patient-csv.js',
            line: 66
        }), 'Error', 'it should have error object');
        t.end();
    };

    patientCSV(request, reply);
});
//# sourceMappingURL=../../node_modules/.cache/ava/4abfc6dfdd27a87df4478762088072a8.js.map