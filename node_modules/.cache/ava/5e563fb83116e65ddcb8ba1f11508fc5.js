'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');
var QueryTypes = {
    SELECT: 'select'
};

test.cb('when there are no patients', function (t) {
    var model = sinon.stub();
    var query = sinon.stub();

    model.withArgs('trial').returns({
        findById: function findById() {
            return _promise2.default.resolve({
                name: 'example',
                description: 'example',
                IRBID: 1,
                IRBStart: new Date(),
                IRBEnd: new Date(),
                targetCount: 1,
                patientPinCounter: 1
            });
        }
    });

    model.withArgs('stage').returns({
        findAll: function findAll() {
            return _promise2.default.resolve([]);
        }
    });

    query.onFirstCall().returns(_promise2.default.resolve([]));

    query.onSecondCall().returns(_promise2.default.resolve([]));

    query.onThirdCall().returns(_promise2.default.resolve([]));

    var trial = proxyquire('../handler/trial', {
        '../../model': {
            sequelize: { model: model, query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            id: 1
        }
    };

    var reply = {
        view: function view(template, data) {
            var _rec = new _powerAssertRecorder(),
                _rec2 = new _powerAssertRecorder(),
                _rec3 = new _powerAssertRecorder(),
                _rec4 = new _powerAssertRecorder(),
                _rec5 = new _powerAssertRecorder();

            t.is(_rec._expr(_rec._capt(template, 'arguments/0'), {
                content: 't.is(template, \'trial\', \'it should render the trial view\')',
                filepath: 'controller/handler-test/trial.js',
                line: 65
            }), 'trial', 'it should render the trial view');
            t.is(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(data, 'arguments/0/object/object').patients, 'arguments/0/object').length, 'arguments/0'), {
                content: 't.is(data.patients.length, 0, \'it should have no patients\')',
                filepath: 'controller/handler-test/trial.js',
                line: 66
            }), 0, 'it should have no patients');
            t.is(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(data, 'arguments/0/object/object').complianceCount, 'arguments/0/object')[0], 'arguments/0'), {
                content: 't.is(data.complianceCount[0], 0, \'it should have no non-compliant patients\')',
                filepath: 'controller/handler-test/trial.js',
                line: 67
            }), 0, 'it should have no non-compliant patients');
            t.is(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(data, 'arguments/0/object/object').complianceCount, 'arguments/0/object')[1], 'arguments/0'), {
                content: 't.is(data.complianceCount[1], 0, \'it should have no semi-compliant patients\')',
                filepath: 'controller/handler-test/trial.js',
                line: 68
            }), 0, 'it should have no semi-compliant patients');
            t.is(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(data, 'arguments/0/object/object').complianceCount, 'arguments/0/object')[2], 'arguments/0'), {
                content: 't.is(data.complianceCount[2], 0, \'it should have no compliant patients\')',
                filepath: 'controller/handler-test/trial.js',
                line: 69
            }), 0, 'it should have no compliant patients');
            t.end();
        }
    };

    trial(request, reply);
});

test.cb('when there is one patient', function (t) {
    var model = sinon.stub();
    var query = sinon.stub();

    model.withArgs('trial').returns({
        findById: function findById() {
            return _promise2.default.resolve({
                name: 'example',
                description: 'example',
                IRBID: 1,
                IRBStart: new Date(),
                IRBEnd: new Date(),
                targetCount: 1,
                patientPinCounter: 1
            });
        }
    });

    model.withArgs('stage').returns({
        findAll: function findAll() {
            return _promise2.default.resolve([]);
        }
    });

    query.onFirstCall().returns(_promise2.default.resolve([{
        pin: 1,
        name: 'example'
    }]));

    query.onSecondCall().returns(_promise2.default.resolve([{
        id: 1,
        pin: 1001,
        completedCount: 1,
        expiredCount: 0
    }]));

    query.onThirdCall().returns(_promise2.default.resolve([]));

    var trial = proxyquire('../handler/trial', {
        '../../model': {
            sequelize: { model: model, query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            id: 1
        }
    };

    var reply = {
        view: function view(template, data) {
            var _rec6 = new _powerAssertRecorder(),
                _rec7 = new _powerAssertRecorder(),
                _rec8 = new _powerAssertRecorder(),
                _rec9 = new _powerAssertRecorder(),
                _rec10 = new _powerAssertRecorder();

            t.is(_rec6._expr(_rec6._capt(template, 'arguments/0'), {
                content: 't.is(template, \'trial\', \'it should render the not found view\')',
                filepath: 'controller/handler-test/trial.js',
                line: 144
            }), 'trial', 'it should render the not found view');
            t.is(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(data, 'arguments/0/object/object').patients, 'arguments/0/object').length, 'arguments/0'), {
                content: 't.is(data.patients.length, 1, \'it should have one patient\')',
                filepath: 'controller/handler-test/trial.js',
                line: 145
            }), 1, 'it should have one patient');
            t.is(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(data, 'arguments/0/object/object').complianceCount, 'arguments/0/object')[0], 'arguments/0'), {
                content: 't.is(data.complianceCount[0], 0, \'it should have no non-compliant patients\')',
                filepath: 'controller/handler-test/trial.js',
                line: 146
            }), 0, 'it should have no non-compliant patients');
            t.is(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(data, 'arguments/0/object/object').complianceCount, 'arguments/0/object')[1], 'arguments/0'), {
                content: 't.is(data.complianceCount[1], 0, \'it should have no semi-compliant patients\')',
                filepath: 'controller/handler-test/trial.js',
                line: 147
            }), 0, 'it should have no semi-compliant patients');
            t.is(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(data, 'arguments/0/object/object').complianceCount, 'arguments/0/object')[2], 'arguments/0'), {
                content: 't.is(data.complianceCount[2], 1, \'it should have one compliant patient\')',
                filepath: 'controller/handler-test/trial.js',
                line: 148
            }), 1, 'it should have one compliant patient');
            t.end();
        }
    };

    trial(request, reply);
});

test.cb('when trial does not exist', function (t) {
    var model = sinon.stub();
    var query = sinon.stub();

    model.withArgs('trial').returns({
        findById: function findById() {
            return _promise2.default.resolve(null);
        }
    });

    model.withArgs('stage').returns({
        findAll: function findAll() {
            return _promise2.default.resolve([]);
        }
    });

    query.onFirstCall().returns(_promise2.default.resolve([]));

    query.onSecondCall().returns(_promise2.default.resolve([]));

    query.onThirdCall().returns(_promise2.default.resolve([]));

    var trial = proxyquire('../handler/trial', {
        '../../model': {
            sequelize: { model: model, query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            id: 1
        }
    };

    var reply = {
        view: function view(template, data) {
            var _rec11 = new _powerAssertRecorder(),
                _rec12 = new _powerAssertRecorder();

            t.is(_rec11._expr(_rec11._capt(template, 'arguments/0'), {
                content: 't.is(template, \'404\', \'it should render not found view\')',
                filepath: 'controller/handler-test/trial.js',
                line: 203
            }), '404', 'it should render not found view');
            t.is(_rec12._expr(_rec12._capt(_rec12._capt(data, 'arguments/0/object').title, 'arguments/0'), {
                content: 't.is(data.title, \'Not Found\', \'it should have page title \\\'Not Found\\\'\')',
                filepath: 'controller/handler-test/trial.js',
                line: 204
            }), 'Not Found', 'it should have page title \'Not Found\'');

            return {
                code: function code(_code) {
                    var _rec13 = new _powerAssertRecorder();

                    t.is(_rec13._expr(_rec13._capt(_code, 'arguments/0'), {
                        content: 't.is(code, 404, \'it should have not found status code\')',
                        filepath: 'controller/handler-test/trial.js',
                        line: 208
                    }), 404, 'it should have not found status code');
                    t.end();
                }
            };
        }
    };

    trial(request, reply);
});
//# sourceMappingURL=../../node_modules/.cache/ava/5e563fb83116e65ddcb8ba1f11508fc5.js.map