{"version":3,"sources":["create-patient.js"],"names":["test","require","sinon","proxyquire","cb","t","model","stub","transaction","createSurveyInstance","withArgs","returns","create","pin","findById","id","patientPinCounter","increment","resolve","addPatient","findOne","rule","surveyTemplateId","commit","createPatient","sequelize","request","log","payload","stageId","startDate","Date","endDate","reply","redirect","path","is","end","reject","rollback","data","name"],"mappings":"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","file":"create-patient.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\ntest.cb('when patient is created', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n    const createSurveyInstance = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        create () {\n            return {\n                pin: 1001\n            };\n        }\n    });\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return {\n                id: 1,\n                patientPinCounter: 1,\n                increment () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        findById () {\n            return {\n                addPatient () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('join_stages_and_surveys')\n    .returns({\n        findOne () {\n            return {\n                rule: 'weekly',\n                surveyTemplateId: 1\n            };\n        }\n    });\n\n    transaction.returns(Promise.resolve({\n        commit () {\n            return Promise.resolve();\n        }\n    }));\n\n    createSurveyInstance.returns(Promise.resolve());\n\n    const createPatient = proxyquire('../handler/create-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        },\n        '../helper/create-survey-instance': createSurveyInstance\n    });\n\n    const request = {\n        log: sinon.stub(),\n        payload: {\n            stageId: 1,\n            startDate: new Date(),\n            endDate: new Date()\n        }\n    };\n\n    const reply = {\n        redirect (path) {\n            t.is(path, '/patient/1001?newPatient=true', 'it should redirect to new patient view');\n            t.end();\n        }\n    };\n\n    createPatient(request, reply);\n});\n\ntest.cb('when trial does not exist', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n    const createSurveyInstance = sinon.stub();\n\n    model.withArgs('patient').returns();\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return Promise.reject();\n        }\n    });\n\n    model.withArgs('stage').returns();\n\n    model.withArgs('join_stages_and_surveys').returns();\n\n    transaction.returns(Promise.resolve({\n        rollback () {\n            return Promise.resolve();\n        }\n    }));\n\n    const createPatient = proxyquire('../handler/create-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        },\n        '../helper/create-survey-instance': createSurveyInstance\n    });\n\n    const request = {\n        log: sinon.stub(),\n        payload: {\n            stageId: 1,\n            startDate: new Date(),\n            endDate: new Date()\n        }\n    };\n\n    const reply = (data) => {\n        t.is(data.name, 'Error', 'it should have an Error object');\n        t.end();\n    };\n\n    createPatient(request, reply);\n});\n\ntest.cb('when stage does not exist', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n    const createSurveyInstance = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        create () {\n            return {\n                pin: 1001\n            };\n        }\n    });\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return {\n                id: 1,\n                patientPinCounter: 1,\n                increment () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        findById () {\n            return Promise.reject();\n        }\n    });\n\n    model.withArgs('join_stages_and_surveys').returns();\n\n    transaction.returns(Promise.resolve({\n        rollback () {\n            return Promise.resolve();\n        }\n    }));\n\n    createSurveyInstance.returns(Promise.resolve());\n\n    const createPatient = proxyquire('../handler/create-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        },\n        '../helper/create-survey-instance': createSurveyInstance\n    });\n\n    const request = {\n        log: sinon.stub(),\n        payload: {\n            stageId: 1,\n            startDate: new Date(),\n            endDate: new Date()\n        }\n    };\n\n    const reply = (data) => {\n        t.is(data.name, 'Error', 'it should have an Error object');\n        t.end();\n    };\n\n    createPatient(request, reply);\n});\n\ntest.cb('when no initial survey is availible for stage', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n    const createSurveyInstance = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        create () {\n            return {\n                pin: 1001\n            };\n        }\n    });\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return {\n                id: 1,\n                patientPinCounter: 1,\n                increment () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        findById () {\n            return {\n                addPatient () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('join_stages_and_surveys')\n    .returns({\n        findOne () {\n            return {\n                rule: 'weekly',\n                surveyTemplateId: 1\n            };\n        }\n    });\n\n    transaction.returns(Promise.resolve({\n        rollback () {\n            return Promise.resolve();\n        }\n    }));\n\n    createSurveyInstance.returns(Promise.reject());\n\n    const createPatient = proxyquire('../handler/create-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        },\n        '../helper/create-survey-instance': createSurveyInstance\n    });\n\n    const request = {\n        log: sinon.stub(),\n        payload: {\n            stageId: 1,\n            startDate: new Date(),\n            endDate: new Date()\n        }\n    };\n\n    const reply = (data) => {\n        t.is(data.name, 'Error', 'it should have an Error object');\n        t.end();\n    };\n\n    createPatient(request, reply);\n});\n"]}