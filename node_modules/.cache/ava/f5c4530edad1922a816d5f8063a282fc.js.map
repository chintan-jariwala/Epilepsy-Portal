{"version":3,"sources":["dashboard.js"],"names":["test","require","sinon","proxyquire","QueryTypes","SELECT","cb","t","query","stub","returns","resolve","dashboard","sequelize","request","auth","credentials","log","reply","view","template","data","is","trials","length","end","reject","title","code"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,IAAMG,aAAa;AACfC,YAAQ;AADO,CAAnB;;AAIAL,KAAKM,EAAL,CAAQ,0BAAR,EAAoC,UAACC,CAAD,EAAO;AACvC,QAAMC,QAAQN,MAAMO,IAAN,EAAd;;AAEAD,UAAME,OAAN,CAAc,kBAAQC,OAAR,CAAgB,EAAhB,CAAd;;AAEA,QAAMC,YAAYT,WAAW,sBAAX,EAAmC;AACjD,uBAAe;AACXU,uBAAW,EAACL,YAAD,EAAQJ,sBAAR;AADA;AADkC,KAAnC,CAAlB;;AAMA,QAAMU,UAAU;AACZC,cAAM;AACFC,yBAAa;AADX,SADM;AAIZC,aAAKf,MAAMO,IAAN;AAJO,KAAhB;;AAOA,QAAMS,QAAQ;AACVC,YADU,gBACJC,QADI,EACMC,IADN,EACY;AAAA;AAAA;;AAClBd,cAAEe,EAAF,uBAAKF,QAAL;AAAA;AAAA;AAAA;AAAA,gBAAe,WAAf,EAA4B,4BAA5B;AACAb,cAAEe,EAAF,yBAAK,2DAAKC,MAAL,wBAAYC,MAAjB;AAAA;AAAA;AAAA;AAAA,gBAAyB,CAAzB,EAA4B,0BAA5B;AACAjB,cAAEkB,GAAF;AACH;AALS,KAAd;;AAQAb,cAAUE,OAAV,EAAmBI,KAAnB;AACH,CA3BD;;AA6BAlB,KAAKM,EAAL,CAAQ,wBAAR,EAAkC,UAACC,CAAD,EAAO;AACrC,QAAMC,QAAQN,MAAMO,IAAN,EAAd;;AAEAD,UAAME,OAAN,CAAc,kBAAQgB,MAAR,EAAd;;AAEA,QAAMd,YAAYT,WAAW,sBAAX,EAAmC;AACjD,uBAAe;AACXU,uBAAW,EAACL,YAAD,EAAQJ,sBAAR;AADA;AADkC,KAAnC,CAAlB;;AAMA,QAAMU,UAAU;AACZC,cAAM;AACFC,yBAAa;AADX,SADM;AAIZC,aAAKf,MAAMO,IAAN;AAJO,KAAhB;;AAOA,QAAMS,QAAQ;AACVC,YADU,gBACJC,QADI,EACMC,IADN,EACY;AAAA;AAAA;;AAClBd,cAAEe,EAAF,yBAAKF,QAAL;AAAA;AAAA;AAAA;AAAA,gBAAe,KAAf,EAAsB,qCAAtB;AACAb,cAAEe,EAAF,yBAAK,wCAAKK,KAAV;AAAA;AAAA;AAAA;AAAA,gBAAiB,WAAjB,EAA8B,2CAA9B;;AAEA,mBAAO;AACHC,oBADG,gBACGA,KADH,EACS;AAAA;;AACRrB,sBAAEe,EAAF,yBAAKM,KAAL;AAAA;AAAA;AAAA;AAAA,wBAAW,GAAX,EAAgB,wCAAhB;AACArB,sBAAEkB,GAAF;AACH;AAJE,aAAP;AAMH;AAXS,KAAd;;AAcAb,cAAUE,OAAV,EAAmBI,KAAnB;AACH,CAjCD","file":"dashboard.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\nconst QueryTypes = {\n    SELECT: 'select'\n};\n\ntest.cb('when there are no trials', (t) => {\n    const query = sinon.stub();\n\n    query.returns(Promise.resolve([]));\n\n    const dashboard = proxyquire('../handler/dashboard', {\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        auth: {\n            credentials: 'dne'\n        },\n        log: sinon.stub()\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'dashboard', 'it should render dashboard');\n            t.is(data.trials.length, 0, 'it should have no trials');\n            t.end();\n        }\n    };\n\n    dashboard(request, reply);\n});\n\ntest.cb('when there is an error', (t) => {\n    const query = sinon.stub();\n\n    query.returns(Promise.reject());\n\n    const dashboard = proxyquire('../handler/dashboard', {\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        auth: {\n            credentials: 'dne'\n        },\n        log: sinon.stub()\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, '404', 'it should render the not found page');\n            t.is(data.title, 'Not Found', 'it should have \\'Not Found\\' as the title');\n\n            return {\n                code (code) {\n                    t.is(code, 404, 'it should return not found status code');\n                    t.end();\n                }\n            };\n        }\n    };\n\n    dashboard(request, reply);\n});\n"]}