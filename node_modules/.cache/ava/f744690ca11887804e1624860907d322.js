'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
var deduplicate = require('../helper/deduplicate');

test('when properties are duplicated', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    var data = [{
        property: 'one'
    }, {
        property: 'one'
    }];

    var properties = ['property'];

    var result = deduplicate(data, properties);

    var expectedResult = [{
        property: 'one'
    }, {
        property: ''
    }];

    t.deepEqual(_rec._expr(_rec._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should have only the first value\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 31
    }), _rec2._expr(_rec2._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should have only the first value\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 31
    }), 'it should have only the first value');
});

test('when all values are unique', function (t) {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var data = [{
        property: 'one'
    }, {
        property: 'two'
    }, {
        property: 'three'
    }];

    var properties = ['property'];

    var result = deduplicate(data, properties);

    t.deepEqual(_rec3._expr(_rec3._capt(data, 'arguments/0'), {
        content: 't.deepEqual(data, result, \'it should have all the values\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 53
    }), _rec4._expr(_rec4._capt(result, 'arguments/1'), {
        content: 't.deepEqual(data, result, \'it should have all the values\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 53
    }), 'it should have all the values');
});

test('when value is unique in multiple places', function (t) {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var data = [{
        property: 'one'
    }, {
        property: 'one'
    }, {
        property: 'two'
    }, {
        property: 'one'
    }];

    var properties = ['property'];

    var result = deduplicate(data, properties);

    var expectedResult = [{
        property: 'one'
    }, {
        property: ''
    }, {
        property: 'two'
    }, {
        property: 'one'
    }];

    t.deepEqual(_rec5._expr(_rec5._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should keep second unique appearance\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 93
    }), _rec6._expr(_rec6._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should keep second unique appearance\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 93
    }), 'it should keep second unique appearance');
});

test('when there missing properties', function (t) {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    var data = [{}, {}];

    var properties = ['property'];

    var result = deduplicate(data, properties);

    var expectedResult = [{
        property: ''
    }, {
        property: ''
    }];

    t.deepEqual(_rec7._expr(_rec7._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should enter an empty value\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 117
    }), _rec8._expr(_rec8._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should enter an empty value\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 117
    }), 'it should enter an empty value');
});

test('when multiple properties are being deduplicated', function (t) {
    var _rec9 = new _powerAssertRecorder(),
        _rec10 = new _powerAssertRecorder();

    var data = [{
        one: 'abc',
        two: 'abc'
    }, {
        one: 'abc',
        two: 'xyz'
    }, {
        one: 'xyz',
        two: 'xyz'
    }];

    var properties = ['one', 'two'];

    var result = deduplicate(data, properties);

    var expectedResult = [{
        one: 'abc',
        two: 'abc'
    }, {
        one: '',
        two: 'xyz'
    }, {
        one: 'xyz',
        two: ''
    }];

    t.deepEqual(_rec9._expr(_rec9._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should deduplicate each property independenty\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 158
    }), _rec10._expr(_rec10._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should deduplicate each property independenty\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 158
    }), 'it should deduplicate each property independenty');
});

test('when multiple types of values are used', function (t) {
    var _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder();

    var data = [{
        property: 'one'
    }, {
        property: 'one'
    }, {
        property: 1
    }, {
        property: 1
    }, {
        property: true
    }, {
        property: true
    }];

    var properties = ['property'];

    var result = deduplicate(data, properties);

    var expectedResult = [{
        property: 'one'
    }, {
        property: ''
    }, {
        property: 1
    }, {
        property: ''
    }, {
        property: true
    }, {
        property: ''
    }];

    t.deepEqual(_rec11._expr(_rec11._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should deduplicate any primitive type\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 210
    }), _rec12._expr(_rec12._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should deduplicate any primitive type\')',
        filepath: 'controller/helper-test/deduplicate.js',
        line: 210
    }), 'it should deduplicate any primitive type');
});
//# sourceMappingURL=../../node_modules/.cache/ava/f744690ca11887804e1624860907d322.js.map