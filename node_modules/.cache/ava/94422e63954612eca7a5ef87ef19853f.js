'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');

test.cb('when user exists and password is correct', function (t) {
    var model = sinon.stub();
    var compare = sinon.stub();

    var user = {
        username: 'example',
        passwordHash: 'example'
    };

    model.withArgs('user').returns({
        find: function find() {
            return _promise2.default.resolve(user);
        }
    });

    compare.returns(_promise2.default.resolve(true));

    var validate = proxyquire('../helper/validate', {
        '../../model': {
            sequelize: { model: model }
        },
        './compare-promise': compare
    });

    var request = null;
    var username = 'example';
    var password = 'example';
    var callback = function callback(err, isValid, userCopy) {
        var _rec = new _powerAssertRecorder(),
            _rec2 = new _powerAssertRecorder(),
            _rec3 = new _powerAssertRecorder();

        t.ifError(err, 'it should not have an error');
        t.true(_rec._expr(_rec._capt(isValid, 'arguments/0'), {
            content: 't.true(isValid, \'it should be a valid login\')',
            filepath: 'controller/helper-test/validate.js',
            line: 38
        }), 'it should be a valid login');
        t.deepEqual(_rec2._expr(_rec2._capt(user, 'arguments/0'), {
            content: 't.deepEqual(user, userCopy, \'it should have user details\')',
            filepath: 'controller/helper-test/validate.js',
            line: 39
        }), _rec3._expr(_rec3._capt(userCopy, 'arguments/1'), {
            content: 't.deepEqual(user, userCopy, \'it should have user details\')',
            filepath: 'controller/helper-test/validate.js',
            line: 39
        }), 'it should have user details');
        t.end();
    };

    validate(request, username, password, callback);
});

test.cb('when user exists and password is incorrect', function (t) {
    var model = sinon.stub();
    var compare = sinon.stub();

    var user = {
        username: 'example',
        passwordHash: 'example'
    };

    model.withArgs('user').returns({
        find: function find() {
            return _promise2.default.resolve(user);
        }
    });

    compare.returns(_promise2.default.resolve(false));

    var validate = proxyquire('../helper/validate', {
        '../../model': {
            sequelize: { model: model }
        },
        './compare-promise': compare
    });

    var request = null;
    var username = 'example';
    var password = 'not right';
    var callback = function callback(err, isValid, userCopy) {
        var _rec4 = new _powerAssertRecorder(),
            _rec5 = new _powerAssertRecorder(),
            _rec6 = new _powerAssertRecorder();

        t.ifError(err, 'it should not have an error');
        t.false(_rec4._expr(_rec4._capt(isValid, 'arguments/0'), {
            content: 't.false(isValid, \'it should be a invalid login\')',
            filepath: 'controller/helper-test/validate.js',
            line: 77
        }), 'it should be a invalid login');
        t.deepEqual(_rec5._expr(_rec5._capt(user, 'arguments/0'), {
            content: 't.deepEqual(user, userCopy, \'it should have user details\')',
            filepath: 'controller/helper-test/validate.js',
            line: 78
        }), _rec6._expr(_rec6._capt(userCopy, 'arguments/1'), {
            content: 't.deepEqual(user, userCopy, \'it should have user details\')',
            filepath: 'controller/helper-test/validate.js',
            line: 78
        }), 'it should have user details');
        t.end();
    };

    validate(request, username, password, callback);
});

test.cb('when user does not exist', function (t) {
    var model = sinon.stub();

    model.withArgs('user').returns({
        find: function find() {
            return _promise2.default.resolve(null);
        }
    });

    var validate = proxyquire('../helper/validate', {
        '../../model': {
            sequelize: { model: model }
        }
    });

    var request = {
        log: sinon.stub()
    };
    var username = 'example';
    var password = 'example';
    var callback = function callback(err, isValid, user) {
        var _rec7 = new _powerAssertRecorder(),
            _rec8 = new _powerAssertRecorder(),
            _rec9 = new _powerAssertRecorder();

        t.true(_rec7._expr(_rec7._capt(_rec7._capt(err, 'arguments/0/left') === null, 'arguments/0'), {
            content: 't.true(err === null, \'it shound not have an error\')',
            filepath: 'controller/helper-test/validate.js',
            line: 108
        }), 'it shound not have an error');
        t.false(_rec8._expr(_rec8._capt(isValid, 'arguments/0'), {
            content: 't.false(isValid, \'it should be a invalid login\')',
            filepath: 'controller/helper-test/validate.js',
            line: 109
        }), 'it should be a invalid login');
        t.is(_rec9._expr(_rec9._capt(user, 'arguments/0'), {
            content: 't.is(user, null, \'it should not have any user infomation\')',
            filepath: 'controller/helper-test/validate.js',
            line: 110
        }), null, 'it should not have any user infomation');
        t.end();
    };

    validate(request, username, password, callback);
});
//# sourceMappingURL=../../node_modules/.cache/ava/94422e63954612eca7a5ef87ef19853f.js.map