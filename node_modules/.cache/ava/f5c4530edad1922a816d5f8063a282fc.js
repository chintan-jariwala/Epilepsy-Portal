'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');
var QueryTypes = {
    SELECT: 'select'
};

test.cb('when there are no trials', function (t) {
    var query = sinon.stub();

    query.returns(_promise2.default.resolve([]));

    var dashboard = proxyquire('../handler/dashboard', {
        '../../model': {
            sequelize: { query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        auth: {
            credentials: 'dne'
        },
        log: sinon.stub()
    };

    var reply = {
        view: function view(template, data) {
            var _rec = new _powerAssertRecorder(),
                _rec2 = new _powerAssertRecorder();

            t.is(_rec._expr(_rec._capt(template, 'arguments/0'), {
                content: 't.is(template, \'dashboard\', \'it should render dashboard\')',
                filepath: 'controller/handler-test/dashboard.js',
                line: 30
            }), 'dashboard', 'it should render dashboard');
            t.is(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(data, 'arguments/0/object/object').trials, 'arguments/0/object').length, 'arguments/0'), {
                content: 't.is(data.trials.length, 0, \'it should have no trials\')',
                filepath: 'controller/handler-test/dashboard.js',
                line: 31
            }), 0, 'it should have no trials');
            t.end();
        }
    };

    dashboard(request, reply);
});

test.cb('when there is an error', function (t) {
    var query = sinon.stub();

    query.returns(_promise2.default.reject());

    var dashboard = proxyquire('../handler/dashboard', {
        '../../model': {
            sequelize: { query: query, QueryTypes: QueryTypes }
        }
    });

    var request = {
        auth: {
            credentials: 'dne'
        },
        log: sinon.stub()
    };

    var reply = {
        view: function view(template, data) {
            var _rec3 = new _powerAssertRecorder(),
                _rec4 = new _powerAssertRecorder();

            t.is(_rec3._expr(_rec3._capt(template, 'arguments/0'), {
                content: 't.is(template, \'404\', \'it should render the not found page\')',
                filepath: 'controller/handler-test/dashboard.js',
                line: 59
            }), '404', 'it should render the not found page');
            t.is(_rec4._expr(_rec4._capt(_rec4._capt(data, 'arguments/0/object').title, 'arguments/0'), {
                content: 't.is(data.title, \'Not Found\', \'it should have \\\'Not Found\\\' as the title\')',
                filepath: 'controller/handler-test/dashboard.js',
                line: 60
            }), 'Not Found', 'it should have \'Not Found\' as the title');

            return {
                code: function code(_code) {
                    var _rec5 = new _powerAssertRecorder();

                    t.is(_rec5._expr(_rec5._capt(_code, 'arguments/0'), {
                        content: 't.is(code, 404, \'it should return not found status code\')',
                        filepath: 'controller/handler-test/dashboard.js',
                        line: 64
                    }), 404, 'it should return not found status code');
                    t.end();
                }
            };
        }
    };

    dashboard(request, reply);
});
//# sourceMappingURL=../../node_modules/.cache/ava/f5c4530edad1922a816d5f8063a282fc.js.map