'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
var processComplianceCount = require('../helper/process-compliance-count');

test('when patient has no expired surveys', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    var data = [{
        expiredCount: 0
    }];

    var result = processComplianceCount(data);

    var expectedResult = [0, 0, 1];

    t.deepEqual(_rec._expr(_rec._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should show patient is compliant\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 17
    }), _rec2._expr(_rec2._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should show patient is compliant\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 17
    }), 'it should show patient is compliant');
});

test('when patient\'s have one or two expired surveys', function (t) {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var data = [{
        expiredCount: 1
    }, {
        expiredCount: 2
    }];

    var result = processComplianceCount(data);

    var expectedResult = [0, 2, 0];

    t.deepEqual(_rec3._expr(_rec3._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should show patients are semi-compliant\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 34
    }), _rec4._expr(_rec4._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should show patients are semi-compliant\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 34
    }), 'it should show patients are semi-compliant');
});

test('when a patient has three or more expired surveys', function (t) {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var data = [{
        expiredCount: 3
    }];

    var result = processComplianceCount(data);

    var expectedResult = [1, 0, 0];

    t.deepEqual(_rec5._expr(_rec5._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should show patient is non-compliant\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 48
    }), _rec6._expr(_rec6._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should show patient is non-compliant\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 48
    }), 'it should show patient is non-compliant');
});

test('when there are multiple patients with different compliance', function (t) {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    var data = [{
        expiredCount: 0
    }, {
        expiredCount: 1
    }, {
        expiredCount: 3
    }];

    var result = processComplianceCount(data);

    var expectedResult = [1, 1, 1];

    t.deepEqual(_rec7._expr(_rec7._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should show correct overall compliance counts\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 68
    }), _rec8._expr(_rec8._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should show correct overall compliance counts\')',
        filepath: 'controller/helper-test/process-compliance-count.js',
        line: 68
    }), 'it should show correct overall compliance counts');
});
//# sourceMappingURL=../../node_modules/.cache/ava/6f68be072562f1c6c94614cd988f33a0.js.map