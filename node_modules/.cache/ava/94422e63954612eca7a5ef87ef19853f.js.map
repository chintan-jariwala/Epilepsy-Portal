{"version":3,"sources":["validate.js"],"names":["test","require","sinon","proxyquire","cb","t","model","stub","compare","user","username","passwordHash","withArgs","returns","find","resolve","validate","sequelize","request","password","callback","err","isValid","userCopy","ifError","true","deepEqual","end","false","log","is"],"mappings":"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","file":"validate.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\ntest.cb('when user exists and password is correct', (t) => {\n    const model = sinon.stub();\n    const compare = sinon.stub();\n\n    const user = {\n        username: 'example',\n        passwordHash: 'example'\n    };\n\n    model\n    .withArgs('user')\n    .returns({\n        find () {\n            return Promise.resolve(user);\n        }\n    });\n\n    compare.returns(Promise.resolve(true));\n\n    const validate = proxyquire('../helper/validate', {\n        '../../model': {\n            sequelize: {model}\n        },\n        './compare-promise': compare\n    });\n\n    const request = null;\n    const username = 'example';\n    const password = 'example';\n    const callback = (err, isValid, userCopy) => {\n        t.ifError(err, 'it should not have an error');\n        t.true(isValid, 'it should be a valid login');\n        t.deepEqual(user, userCopy, 'it should have user details');\n        t.end();\n    };\n\n    validate(request, username, password, callback);\n});\n\ntest.cb('when user exists and password is incorrect', (t) => {\n    const model = sinon.stub();\n    const compare = sinon.stub();\n\n    const user = {\n        username: 'example',\n        passwordHash: 'example'\n    };\n\n    model\n    .withArgs('user')\n    .returns({\n        find () {\n            return Promise.resolve(user);\n        }\n    });\n\n    compare.returns(Promise.resolve(false));\n\n    const validate = proxyquire('../helper/validate', {\n        '../../model': {\n            sequelize: {model}\n        },\n        './compare-promise': compare\n    });\n\n    const request = null;\n    const username = 'example';\n    const password = 'not right';\n    const callback = (err, isValid, userCopy) => {\n        t.ifError(err, 'it should not have an error');\n        t.false(isValid, 'it should be a invalid login');\n        t.deepEqual(user, userCopy, 'it should have user details');\n        t.end();\n    };\n\n    validate(request, username, password, callback);\n});\n\ntest.cb('when user does not exist', (t) => {\n    const model = sinon.stub();\n\n    model\n    .withArgs('user')\n    .returns({\n        find () {\n            return Promise.resolve(null);\n        }\n    });\n\n    const validate = proxyquire('../helper/validate', {\n        '../../model': {\n            sequelize: {model}\n        }\n    });\n\n    const request = {\n        log: sinon.stub()\n    };\n    const username = 'example';\n    const password = 'example';\n    const callback = (err, isValid, user) => {\n        t.true(err === null, 'it shound not have an error');\n        t.false(isValid, 'it should be a invalid login');\n        t.is(user, null, 'it should not have any user infomation');\n        t.end();\n    };\n\n    validate(request, username, password, callback);\n});\n"]}