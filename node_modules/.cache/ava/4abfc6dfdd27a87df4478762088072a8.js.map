{"version":3,"sources":["patient-csv.js"],"names":["test","require","sinon","proxyquire","QueryTypes","SELECT","cb","t","query","stub","returns","resolve","patientCSV","boom","sequelize","request","log","params","pin","reply","data","is","type","end","reject","Number","NaN","name"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,aAAaF,QAAQ,YAAR,CAAnB;AACA,IAAMG,aAAa;AACfC,YAAQ;AADO,CAAnB;;AAIAL,KAAKM,EAAL,CAAQ,6BAAR,EAAuC,UAACC,CAAD,EAAO;AAC1C,QAAMC,QAAQN,MAAMO,IAAN,EAAd;;AAEAD,UAAME,OAAN,CAAc,kBAAQC,OAAR,CAAgB,EAAhB,CAAd;;AAEA,QAAMC,aAAaT,WAAW,wBAAX,EAAqC;AACpDU,cAAMX,MAAMO,IAAN,EAD8C;AAEpD,uBAAe;AACXK,uBAAW,EAACN,YAAD,EAAQJ,sBAAR;AADA;AAFqC,KAArC,CAAnB;;AAOA,QAAMW,UAAU;AACZC,aAAKd,MAAMO,IAAN,EADO;AAEZQ,gBAAQ;AACJC,iBAAK;AADD;AAFI,KAAhB;;AAOA,QAAMC,QAAQ,SAARA,KAAQ,CAACC,IAAD,EAAU;AAAA;;AACpBb,UAAEc,EAAF,uBACID,IADJ;AAAA;AAAA;AAAA;AAAA,YAEI,wFAFJ,EAGI,yCAHJ;;AAMA,eAAO;AACHE,gBADG,gBACGA,KADH,EACS;AAAA;;AACRf,kBAAEc,EAAF,yBAAKC,KAAL;AAAA;AAAA;AAAA;AAAA,oBAAW,UAAX,EAAuB,8BAAvB;AACAf,kBAAEgB,GAAF;AACH;AAJE,SAAP;AAMH,KAbD;;AAeAX,eAAWG,OAAX,EAAoBI,KAApB;AACH,CAnCD;;AAqCAnB,KAAKM,EAAL,CAAQ,6BAAR,EAAuC,UAACC,CAAD,EAAO;AAC1C,QAAMC,QAAQN,MAAMO,IAAN,EAAd;;AAEAD,UAAME,OAAN,CAAc,kBAAQc,MAAR,CAAe,EAAf,CAAd;;AAEA,QAAMZ,aAAaT,WAAW,wBAAX,EAAqC;AACpD,uBAAe;AACXW,uBAAW,EAACN,YAAD,EAAQJ,sBAAR;AADA;AADqC,KAArC,CAAnB;;AAMA,QAAMW,UAAU;AACZC,aAAKd,MAAMO,IAAN,EADO;AAEZQ,gBAAQ;AACJC,iBAAKO,OAAOC;AADR;AAFI,KAAhB;;AAOA,QAAMP,QAAQ,SAARA,KAAQ,CAACC,IAAD,EAAU;AAAA;;AACpBb,UAAEc,EAAF,yBAAK,wCAAKM,IAAV;AAAA;AAAA;AAAA;AAAA,YAAgB,OAAhB,EAAyB,6BAAzB;AACApB,UAAEgB,GAAF;AACH,KAHD;;AAKAX,eAAWG,OAAX,EAAoBI,KAApB;AACH,CAxBD","file":"patient-csv.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\nconst QueryTypes = {\n    SELECT: 'select'\n};\n\ntest.cb('when patient has no surveys', (t) => {\n    const query = sinon.stub();\n\n    query.returns(Promise.resolve([]));\n\n    const patientCSV = proxyquire('../handler/patient-csv', {\n        boom: sinon.stub(),\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = (data) => {\n        t.is(\n            data,\n            'patient pin,survey name,unique survey id,unique question id,question,question option\\n',\n            'it should show the headers with no data'\n        );\n\n        return {\n            type (type) {\n                t.is(type, 'text/csv', 'it should sent in csv format');\n                t.end();\n            }\n        };\n    };\n\n    patientCSV(request, reply);\n});\n\ntest.cb('when patient doesn\\'t exist', (t) => {\n    const query = sinon.stub();\n\n    query.returns(Promise.reject([]));\n\n    const patientCSV = proxyquire('../handler/patient-csv', {\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: Number.NaN\n        }\n    };\n\n    const reply = (data) => {\n        t.is(data.name, 'Error', 'it should have error object');\n        t.end();\n    };\n\n    patientCSV(request, reply);\n});\n"]}