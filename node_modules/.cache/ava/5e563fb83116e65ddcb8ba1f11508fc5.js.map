{"version":3,"sources":["trial.js"],"names":["test","require","sinon","proxyquire","QueryTypes","SELECT","cb","t","model","stub","query","withArgs","returns","findById","resolve","name","description","IRBID","IRBStart","Date","IRBEnd","targetCount","patientPinCounter","findAll","onFirstCall","onSecondCall","onThirdCall","trial","sequelize","request","log","params","id","reply","view","template","data","is","patients","length","complianceCount","end","pin","completedCount","expiredCount","title","code"],"mappings":"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","file":"trial.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\nconst QueryTypes = {\n    SELECT: 'select'\n};\n\ntest.cb('when there are no patients', (t) => {\n    const model = sinon.stub();\n    const query = sinon.stub();\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return Promise.resolve({\n                name: 'example',\n                description: 'example',\n                IRBID: 1,\n                IRBStart: new Date(),\n                IRBEnd: new Date(),\n                targetCount: 1,\n                patientPinCounter: 1\n            });\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        findAll () {\n            return Promise.resolve([]);\n        }\n    });\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onThirdCall()\n    .returns(Promise.resolve([]));\n\n    const trial = proxyquire('../handler/trial', {\n        '../../model': {\n            sequelize: {model, query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            id: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'trial', 'it should render the trial view');\n            t.is(data.patients.length, 0, 'it should have no patients');\n            t.is(data.complianceCount[0], 0, 'it should have no non-compliant patients');\n            t.is(data.complianceCount[1], 0, 'it should have no semi-compliant patients');\n            t.is(data.complianceCount[2], 0, 'it should have no compliant patients');\n            t.end();\n        }\n    };\n\n    trial(request, reply);\n});\n\ntest.cb('when there is one patient', (t) => {\n    const model = sinon.stub();\n    const query = sinon.stub();\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return Promise.resolve({\n                name: 'example',\n                description: 'example',\n                IRBID: 1,\n                IRBStart: new Date(),\n                IRBEnd: new Date(),\n                targetCount: 1,\n                patientPinCounter: 1\n            });\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        findAll () {\n            return Promise.resolve([]);\n        }\n    });\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve([\n        {\n            pin: 1,\n            name: 'example'\n        }\n    ]));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve([\n        {\n            id: 1,\n            pin: 1001,\n            completedCount: 1,\n            expiredCount: 0\n        }\n    ]));\n\n    query\n    .onThirdCall()\n    .returns(Promise.resolve([]));\n\n    const trial = proxyquire('../handler/trial', {\n        '../../model': {\n            sequelize: {model, query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            id: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'trial', 'it should render the not found view');\n            t.is(data.patients.length, 1, 'it should have one patient');\n            t.is(data.complianceCount[0], 0, 'it should have no non-compliant patients');\n            t.is(data.complianceCount[1], 0, 'it should have no semi-compliant patients');\n            t.is(data.complianceCount[2], 1, 'it should have one compliant patient');\n            t.end();\n        }\n    };\n\n    trial(request, reply);\n});\n\ntest.cb('when trial does not exist', (t) => {\n    const model = sinon.stub();\n    const query = sinon.stub();\n\n    model\n    .withArgs('trial')\n    .returns({\n        findById () {\n            return Promise.resolve(null);\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        findAll () {\n            return Promise.resolve([]);\n        }\n    });\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onThirdCall()\n    .returns(Promise.resolve([]));\n\n    const trial = proxyquire('../handler/trial', {\n        '../../model': {\n            sequelize: {model, query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            id: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, '404', 'it should render not found view');\n            t.is(data.title, 'Not Found', 'it should have page title \\'Not Found\\'');\n\n            return {\n                code (code) {\n                    t.is(code, 404, 'it should have not found status code');\n                    t.end();\n                }\n            };\n        }\n    };\n\n    trial(request, reply);\n});\n"]}