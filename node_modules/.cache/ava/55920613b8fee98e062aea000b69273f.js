'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');

test.cb('when patient is created', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();
    var createSurveyInstance = sinon.stub();

    model.withArgs('patient').returns({
        create: function create() {
            return {
                pin: 1001
            };
        }
    });

    model.withArgs('trial').returns({
        findById: function findById() {
            return {
                id: 1,
                patientPinCounter: 1,
                increment: function increment() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('stage').returns({
        findById: function findById() {
            return {
                addPatient: function addPatient() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('join_stages_and_surveys').returns({
        findOne: function findOne() {
            return {
                rule: 'weekly',
                surveyTemplateId: 1
            };
        }
    });

    transaction.returns(_promise2.default.resolve({
        commit: function commit() {
            return _promise2.default.resolve();
        }
    }));

    createSurveyInstance.returns(_promise2.default.resolve());

    var createPatient = proxyquire('../handler/create-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        },
        '../helper/create-survey-instance': createSurveyInstance
    });

    var request = {
        log: sinon.stub(),
        payload: {
            stageId: 1,
            startDate: new Date(),
            endDate: new Date()
        }
    };

    var reply = {
        redirect: function redirect(path) {
            var _rec = new _powerAssertRecorder();

            t.is(_rec._expr(_rec._capt(path, 'arguments/0'), {
                content: 't.is(path, \'/patient/1001?newPatient=true\', \'it should redirect to new patient view\')',
                filepath: 'controller/handler-test/create-patient.js',
                line: 88
            }), '/patient/1001?newPatient=true', 'it should redirect to new patient view');
            t.end();
        }
    };

    createPatient(request, reply);
});

test.cb('when trial does not exist', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();
    var createSurveyInstance = sinon.stub();

    model.withArgs('patient').returns();

    model.withArgs('trial').returns({
        findById: function findById() {
            return _promise2.default.reject();
        }
    });

    model.withArgs('stage').returns();

    model.withArgs('join_stages_and_surveys').returns();

    transaction.returns(_promise2.default.resolve({
        rollback: function rollback() {
            return _promise2.default.resolve();
        }
    }));

    var createPatient = proxyquire('../handler/create-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        },
        '../helper/create-survey-instance': createSurveyInstance
    });

    var request = {
        log: sinon.stub(),
        payload: {
            stageId: 1,
            startDate: new Date(),
            endDate: new Date()
        }
    };

    var reply = function reply(data) {
        var _rec2 = new _powerAssertRecorder();

        t.is(_rec2._expr(_rec2._capt(_rec2._capt(data, 'arguments/0/object').name, 'arguments/0'), {
            content: 't.is(data.name, \'Error\', \'it should have an Error object\')',
            filepath: 'controller/handler-test/create-patient.js',
            line: 141
        }), 'Error', 'it should have an Error object');
        t.end();
    };

    createPatient(request, reply);
});

test.cb('when stage does not exist', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();
    var createSurveyInstance = sinon.stub();

    model.withArgs('patient').returns({
        create: function create() {
            return {
                pin: 1001
            };
        }
    });

    model.withArgs('trial').returns({
        findById: function findById() {
            return {
                id: 1,
                patientPinCounter: 1,
                increment: function increment() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('stage').returns({
        findById: function findById() {
            return _promise2.default.reject();
        }
    });

    model.withArgs('join_stages_and_surveys').returns();

    transaction.returns(_promise2.default.resolve({
        rollback: function rollback() {
            return _promise2.default.resolve();
        }
    }));

    createSurveyInstance.returns(_promise2.default.resolve());

    var createPatient = proxyquire('../handler/create-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        },
        '../helper/create-survey-instance': createSurveyInstance
    });

    var request = {
        log: sinon.stub(),
        payload: {
            stageId: 1,
            startDate: new Date(),
            endDate: new Date()
        }
    };

    var reply = function reply(data) {
        var _rec3 = new _powerAssertRecorder();

        t.is(_rec3._expr(_rec3._capt(_rec3._capt(data, 'arguments/0/object').name, 'arguments/0'), {
            content: 't.is(data.name, \'Error\', \'it should have an Error object\')',
            filepath: 'controller/handler-test/create-patient.js',
            line: 215
        }), 'Error', 'it should have an Error object');
        t.end();
    };

    createPatient(request, reply);
});

test.cb('when no initial survey is availible for stage', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();
    var createSurveyInstance = sinon.stub();

    model.withArgs('patient').returns({
        create: function create() {
            return {
                pin: 1001
            };
        }
    });

    model.withArgs('trial').returns({
        findById: function findById() {
            return {
                id: 1,
                patientPinCounter: 1,
                increment: function increment() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('stage').returns({
        findById: function findById() {
            return {
                addPatient: function addPatient() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('join_stages_and_surveys').returns({
        findOne: function findOne() {
            return {
                rule: 'weekly',
                surveyTemplateId: 1
            };
        }
    });

    transaction.returns(_promise2.default.resolve({
        rollback: function rollback() {
            return _promise2.default.resolve();
        }
    }));

    createSurveyInstance.returns(_promise2.default.reject());

    var createPatient = proxyquire('../handler/create-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        },
        '../helper/create-survey-instance': createSurveyInstance
    });

    var request = {
        log: sinon.stub(),
        payload: {
            stageId: 1,
            startDate: new Date(),
            endDate: new Date()
        }
    };

    var reply = function reply(data) {
        var _rec4 = new _powerAssertRecorder();

        t.is(_rec4._expr(_rec4._capt(_rec4._capt(data, 'arguments/0/object').name, 'arguments/0'), {
            content: 't.is(data.name, \'Error\', \'it should have an Error object\')',
            filepath: 'controller/handler-test/create-patient.js',
            line: 302
        }), 'Error', 'it should have an Error object');
        t.end();
    };

    createPatient(request, reply);
});
//# sourceMappingURL=../../node_modules/.cache/ava/55920613b8fee98e062aea000b69273f.js.map