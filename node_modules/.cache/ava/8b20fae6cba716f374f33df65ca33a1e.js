'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
var proxyquire = require('proxyquire');
var bcrypt = require('../../bcrypt-shim');
var comparePromise = proxyquire('../helper/compare-promise', { bcrypt: bcrypt });

test.cb('when values are the same', function (t) {
    comparePromise('test', 'test').then(function (isValid) {
        var _rec = new _powerAssertRecorder();

        t.true(_rec._expr(_rec._capt(isValid, 'arguments/0'), {
            content: 't.true(isValid, \'it should be valid\')',
            filepath: 'controller/helper-test/compare-promise.js',
            line: 11
        }), 'it should be valid');
        t.end();

        return;
    }).catch(function () {
        t.fail('it should not throw an exception');
        t.end();
    });
});

test.cb('when values are different', function (t) {
    comparePromise('test', 'not').then(function (isValid) {
        var _rec2 = new _powerAssertRecorder();

        t.false(_rec2._expr(_rec2._capt(isValid, 'arguments/0'), {
            content: 't.false(isValid, \'it should be invalid\')',
            filepath: 'controller/helper-test/compare-promise.js',
            line: 25
        }), 'it should be invalid');
        t.end();

        return;
    }).catch(function () {
        t.fail('it should not throw an exception');
        t.end();
    });
});
//# sourceMappingURL=../../node_modules/.cache/ava/8b20fae6cba716f374f33df65ca33a1e.js.map