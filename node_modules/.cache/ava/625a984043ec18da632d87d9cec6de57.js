'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
var moment = require('moment');
var processSurveyInstances = require('../helper/process-survey-instances');

test('when survey is completed in one day with two days allowed', function (t) {
    var _rec = new _powerAssertRecorder();

    var open = moment('2000-01-01');
    var close = moment('2000-01-03');
    var completed = moment('2000-01-02');

    var result = processSurveyInstances.calculateTimeLeft(open, close, completed);

    t.is(_rec._expr(_rec._capt(result, 'arguments/0'), {
        content: 't.is(result, 50, \'it should have 50% of time remaining\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 14
    }), 50, 'it should have 50% of time remaining');
});

test('when survey is completed at end time', function (t) {
    var _rec2 = new _powerAssertRecorder();

    var open = moment('2000-01-01');
    var close = moment('2000-01-02');
    var completed = moment('2000-01-02');

    var result = processSurveyInstances.calculateTimeLeft(open, close, completed);

    t.is(_rec2._expr(_rec2._capt(result, 'arguments/0'), {
        content: 't.is(result, 0, \'it should have no time remaining\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 24
    }), 0, 'it should have no time remaining');
});

test('when survey is completed after end time', function (t) {
    var _rec3 = new _powerAssertRecorder();

    var open = moment('2000-01-01');
    var close = moment('2000-01-02');
    var completed = moment('2000-01-03');

    var result = processSurveyInstances.calculateTimeLeft(open, close, completed);

    t.is(_rec3._expr(_rec3._capt(result, 'arguments/0'), {
        content: 't.is(result, 0, \'it should have no time remaining\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 34
    }), 0, 'it should have no time remaining');
});

test('when chart data is generated', function (t) {
    var _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var result = processSurveyInstances.pickTimeLeft([]);
    var expectedKeys = ['label', 'backgroundColor', 'borderColor', 'pointBorderColor', 'data'];

    t.true(_rec4._expr(_rec4._capt(_rec4._capt(result, 'arguments/0/left') instanceof _rec4._capt(Array, 'arguments/0/right'), 'arguments/0'), {
        content: 't.true(result instanceof Array, \'it should return an array\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 47
    }), 'it should return an array');
    t.deepEqual(_rec5._expr(_rec5._capt(_rec5._capt(Object, 'arguments/0/callee/object').keys(_rec5._capt(_rec5._capt(result, 'arguments/0/arguments/0/object')[0], 'arguments/0/arguments/0')), 'arguments/0'), {
        content: 't.deepEqual(Object.keys(result[0]), expectedKeys, \'it should have keys needed for chart js\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 48
    }), _rec6._expr(_rec6._capt(expectedKeys, 'arguments/1'), {
        content: 't.deepEqual(Object.keys(result[0]), expectedKeys, \'it should have keys needed for chart js\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 48
    }), 'it should have keys needed for chart js');
});

test('when chart axes are generated with no dates', function (t) {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    var result = processSurveyInstances.pickDates([]);

    t.deepEqual(_rec7._expr(_rec7._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, [], \'it should have no dates\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 54
    }), _rec8._expr(_rec8._capt([], 'arguments/1'), {
        content: 't.deepEqual(result, [], \'it should have no dates\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 54
    }), 'it should have no dates');
});

test('when chart axes are generated with one date', function (t) {
    var _rec9 = new _powerAssertRecorder();

    var data = [{
        startTime: 'Sat Jan 01 2000 00:00:00 GMT-0700 (MST)',
        dateCompleted: 'Sat Jan 02 2000 00:00:00 GMT-0700 (MST)'
    }];

    var result = processSurveyInstances.pickDates(data);

    t.is(_rec9._expr(_rec9._capt(_rec9._capt(result, 'arguments/0/object').length, 'arguments/0'), {
        content: 't.is(result.length, 2, \'it should have two dates\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 67
    }), 2, 'it should have two dates');
});

test('when chart axes are generated with two dates', function (t) {
    var _rec10 = new _powerAssertRecorder();

    var data = [{
        startTime: 'Sat Jan 01 2000 00:00:00 GMT-0700 (MST)',
        dateCompleted: 'Sat Jan 02 2000 00:00:00 GMT-0700 (MST)'
    }, {
        startTime: 'Sat Jan 01 2000 00:00:00 GMT-0700 (MST)',
        dateCompleted: 'Sat Jan 02 2000 00:00:00 GMT-0700 (MST)'
    }];

    var result = processSurveyInstances.pickDates(data);

    t.is(_rec10._expr(_rec10._capt(_rec10._capt(result, 'arguments/0/object').length, 'arguments/0'), {
        content: 't.is(result.length, 3, \'it should have three dates\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 84
    }), 3, 'it should have three dates');
});

test('when it generates the full chart information', function (t) {
    var _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder();

    var result = processSurveyInstances([]);

    var expectedKeys = ['labels', 'datasets'];

    t.deepEqual(_rec11._expr(_rec11._capt(_rec11._capt(Object, 'arguments/0/callee/object').keys(_rec11._capt(result, 'arguments/0/arguments/0')), 'arguments/0'), {
        content: 't.deepEqual(Object.keys(result), expectedKeys, \'it should have the keys needed by chart js\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 95
    }), _rec12._expr(_rec12._capt(expectedKeys, 'arguments/1'), {
        content: 't.deepEqual(Object.keys(result), expectedKeys, \'it should have the keys needed by chart js\')',
        filepath: 'controller/helper-test/process-survey-instances.js',
        line: 95
    }), 'it should have the keys needed by chart js');
});
//# sourceMappingURL=../../node_modules/.cache/ava/625a984043ec18da632d87d9cec6de57.js.map