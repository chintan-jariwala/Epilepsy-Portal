'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
var convertJsonToCsv = require('../helper/convert-json-to-csv');

test('when there is a label and a key', function (t) {
    var _rec = new _powerAssertRecorder();

    var json = [{
        one: 'a1',
        two: 'b1'
    }, {
        one: 'a2',
        two: 'b2'
    }];

    var options = [{
        label: 'example 1',
        key: 'one'
    }, {
        label: 'example 2',
        key: 'two'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec._expr(_rec._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'example 1,example 2\\n"a1","b1"\\n"a2","b2"\', \'it should have the labels and the values in order\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 31
    }), 'example 1,example 2\n"a1","b1"\n"a2","b2"', 'it should have the labels and the values in order');
});

test('when there are commas in the values', function (t) {
    var _rec2 = new _powerAssertRecorder();

    var json = [{
        one: 'a,b,c,,'
    }, {
        one: ',,,,,,,'
    }];

    var options = [{
        label: 'value',
        key: 'one'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec2._expr(_rec2._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'value\\n"a,b,c,,"\\n",,,,,,,"\', \'it should wrap values in double quotes\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 53
    }), 'value\n"a,b,c,,"\n",,,,,,,"', 'it should wrap values in double quotes');
});

test('when there are missing or falsy values', function (t) {
    var _rec3 = new _powerAssertRecorder();

    var json = [{
        one: null
    }, {}, {
        one: false
    }, {
        one: 'value'
    }];

    var options = [{
        label: 'one',
        key: 'one',
        default: 'default'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec3._expr(_rec3._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'one\\n"default"\\n"default"\\n"default"\\n"value"\', \'it should replace falsy values with default\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 80
    }), 'one\n"default"\n"default"\n"default"\n"value"', 'it should replace falsy values with default');
});

test('when columns are filtered', function (t) {
    var _rec4 = new _powerAssertRecorder();

    var json = [{
        wanted: 'value 1',
        unwanted: 'value 2'
    }, {
        wanted: 'string 1',
        unwanted: 'string 2'
    }];

    var options = [{
        label: 'column',
        key: 'wanted'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec4._expr(_rec4._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'column\\n"value 1"\\n"string 1"\', \'it should keep only requested column\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 104
    }), 'column\n"value 1"\n"string 1"', 'it should keep only requested column');
});

test('when order is changed', function (t) {
    var _rec5 = new _powerAssertRecorder();

    var json = [{
        one: 'one one',
        two: 'two one'
    }, {
        one: 'one two',
        two: 'two two'
    }];

    var options = [{
        label: 'two',
        key: 'two'
    }, {
        label: 'one',
        key: 'one'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec5._expr(_rec5._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'two,one\\n"two one","one one"\\n"two two","one two"\', \'it should keep option order\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 132
    }), 'two,one\n"two one","one one"\n"two two","one two"', 'it should keep option order');
});

test('when different different value types are used', function (t) {
    var _rec6 = new _powerAssertRecorder();

    var json = [{
        value: 'string'
    }, {
        value: 1
    }, {
        value: true
    }, {
        value: {}
    }];

    var options = [{
        label: 'value',
        key: 'value'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec6._expr(_rec6._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'value\\n"string"\\n"1"\\n"true"\\n"[object Object]"\', \'it should display all primitives\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 160
    }), 'value\n"string"\n"1"\n"true"\n"[object Object]"', 'it should display all primitives');
});

test('when a column is duplicated', function (t) {
    var _rec7 = new _powerAssertRecorder();

    var json = [{
        value: 'one'
    }, {
        value: 'two'
    }];

    var options = [{
        label: 'one',
        key: 'value'
    }, {
        label: 'two',
        key: 'value'
    }];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec7._expr(_rec7._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'one,two\\n"one","one"\\n"two","two"\', \'it should duplicate column\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 186
    }), 'one,two\n"one","one"\n"two","two"', 'it should duplicate column');
});

test('when json is empty', function (t) {
    var _rec8 = new _powerAssertRecorder();

    var json = [];
    var options = [];

    var csv = convertJsonToCsv(json, options);

    t.is(_rec8._expr(_rec8._capt(csv, 'arguments/0'), {
        content: 't.is(csv, \'\\n\', \'it should be empty\')',
        filepath: 'controller/helper-test/convert-json-to-csv.js',
        line: 195
    }), '\n', 'it should be empty');
});
//# sourceMappingURL=../../node_modules/.cache/ava/464ad93797aff05a6661b0e5299de056.js.map