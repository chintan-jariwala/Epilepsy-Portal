{"version":3,"sources":["survey.js"],"names":["test","require","sinon","proxyquire","QueryTypes","SELECT","cb","t","model","stub","query","withArgs","returns","findById","resolve","id","name","startTime","Date","endTime","userSubmissionTime","onFirstCall","onSecondCall","pin","survey","sequelize","request","log","params","reply","view","template","data","is","questions","length","end","questionOrder","questionId","questionText","optionId","optionText","Number","NaN","title","code"],"mappings":"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","file":"survey.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\nconst QueryTypes = {\n    SELECT: 'select'\n};\n\ntest.cb('when the survey has not been completed', (t) => {\n    const model = sinon.stub();\n    const query = sinon.stub();\n\n    model\n    .withArgs('survey_instance')\n    .returns({\n        findById () {\n            return Promise.resolve({\n                id: 1,\n                name: 'example',\n                startTime: new Date(),\n                endTime: new Date(),\n                userSubmissionTime: null\n            });\n        }\n    });\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve({\n        pin: 1,\n        id: 1,\n        name: 'example'\n    }));\n\n    const survey = proxyquire('../handler/survey', {\n        '../../model': {\n            sequelize: {model, query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            id: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'survey', 'it should render survey view');\n            t.is(data.questions.length, 0, 'it should have no questions');\n            t.end();\n        }\n    };\n\n    survey(request, reply);\n});\n\ntest.cb('when the survey has been completed', (t) => {\n    const model = sinon.stub();\n    const query = sinon.stub();\n\n    model\n    .withArgs('survey_instance')\n    .returns({\n        findById () {\n            return Promise.resolve({\n                id: 1,\n                name: 'example',\n                startTime: new Date(),\n                endTime: new Date(),\n                userSubmissionTime: null\n            });\n        }\n    });\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve([\n        {\n            questionOrder: 1,\n            questionId: 1,\n            questionText: 'example',\n            optionId: 1,\n            optionText: 'example'\n        }\n    ]));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve({\n        pin: 1,\n        id: 1,\n        name: 'example'\n    }));\n\n    const survey = proxyquire('../handler/survey', {\n        '../../model': {\n            sequelize: {model, query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            id: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'survey', 'it should render survey view');\n            t.is(data.questions.length, 1, 'it should have one question');\n            t.end();\n        }\n    };\n\n    survey(request, reply);\n});\n\ntest.cb('when survey does not exist', (t) => {\n    const model = sinon.stub();\n    const query = sinon.stub();\n\n    model\n    .withArgs('survey_instance')\n    .returns({\n        findById () {\n            return Promise.resolve(null);\n        }\n    });\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve(null));\n\n    const survey = proxyquire('../handler/survey', {\n        '../../model': {\n            sequelize: {model, query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            id: Number.NaN\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, '404', 'it should render not found view');\n            t.is(data.title, 'Not Found', 'it should have page title \\'Not Found\\'');\n\n            return {\n                code (code) {\n                    t.is(code, 404, 'it should have not found status code');\n                    t.end();\n                }\n            };\n        }\n    };\n\n    survey(request, reply);\n});\n"]}