'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var test = require('ava');
var processPatientStatus = require('../helper/process-patient-status');

test('when patient has no expired surveys', function (t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    var data = {
        expiredCount: 0
    };

    var result = processPatientStatus(data);

    var expectedResult = {
        expiredCount: 0,
        status: 'Compliant'
    };

    t.deepEqual(_rec._expr(_rec._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 18
    }), _rec2._expr(_rec2._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 18
    }), 'it should return row with compliant status');
});

test('when patient has one expired survey', function (t) {
    var _rec3 = new _powerAssertRecorder(),
        _rec4 = new _powerAssertRecorder();

    var data = {
        expiredCount: 1
    };

    var result = processPatientStatus(data);

    var expectedResult = {
        expiredCount: 1,
        status: 'Semi-Compliant'
    };

    t.deepEqual(_rec3._expr(_rec3._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with semi-compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 33
    }), _rec4._expr(_rec4._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with semi-compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 33
    }), 'it should return row with semi-compliant status');
});

test('when patient has two expired surveys', function (t) {
    var _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var data = {
        expiredCount: 2
    };

    var result = processPatientStatus(data);

    var expectedResult = {
        expiredCount: 2,
        status: 'Semi-Compliant'
    };

    t.deepEqual(_rec5._expr(_rec5._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with semi-compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 48
    }), _rec6._expr(_rec6._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with semi-compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 48
    }), 'it should return row with semi-compliant status');
});

test('when patient has three expired surveys', function (t) {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder();

    var data = {
        expiredCount: 3
    };

    var result = processPatientStatus(data);

    var expectedResult = {
        expiredCount: 3,
        status: 'Non-Compliant'
    };

    t.deepEqual(_rec7._expr(_rec7._capt(result, 'arguments/0'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with non-compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 63
    }), _rec8._expr(_rec8._capt(expectedResult, 'arguments/1'), {
        content: 't.deepEqual(result, expectedResult, \'it should return row with non-compliant status\')',
        filepath: 'controller/helper-test/process-patient-status.js',
        line: 63
    }), 'it should return row with non-compliant status');
});
//# sourceMappingURL=../../node_modules/.cache/ava/6ff5e3a06a868ceea0b9dec1bd553337.js.map