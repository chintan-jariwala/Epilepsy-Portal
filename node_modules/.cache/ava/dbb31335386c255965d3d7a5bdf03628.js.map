{"version":3,"sources":["create-trial.js"],"names":["test","require","sinon","proxyquire","mockSequelize","model","stub","transaction","withArgs","returns","find","resolve","create","id","addStages","commit","rollback","cb","t","sequelize","createTrial","request","log","payload","name","description","IRBID","IRBStart","IRBEnd","targetCount","stagecount","stageName","reply","redirect","route","is","end","data"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA;;;;AAIA,SAASG,aAAT,GAA0B;AACtB;AACA,QAAMC,QAAQH,MAAMI,IAAN,EAAd;AACA,QAAMC,cAAcL,MAAMI,IAAN,EAApB;;AAEAD,UACCG,QADD,CACU,OADV,EAECC,OAFD,CAES;AACLC,YADK,kBACG;AACJ,mBAAO,kBAAQC,OAAR,CAAgB,EAAhB,CAAP;AACH,SAHI;AAILC,cAJK,oBAIK;AACN,mBAAO,kBAAQD,OAAR,CAAgB;AACnBE,oBAAI,CADe;AAEnBC,yBAFmB,uBAEN;AACT,2BAAO,kBAAQH,OAAR,EAAP;AACH;AAJkB,aAAhB,CAAP;AAMH;AAXI,KAFT;;AAgBAN,UACCG,QADD,CACU,OADV,EAECC,OAFD,CAES;AACLC,YADK,kBACG;AACJ,mBAAO,kBAAQC,OAAR,CAAgB,EAAhB,CAAP;AACH,SAHI;AAILC,cAJK,oBAIK;AACN,mBAAO,kBAAQD,OAAR,EAAP;AACH;AANI,KAFT;;AAWAJ,gBAAYE,OAAZ,CAAoB,kBAAQE,OAAR,CAAgB;AAChCI,gBAAQb,MAAMI,IAAN,EADwB;AAEhCU,kBAAUd,MAAMI,IAAN;AAFsB,KAAhB,CAApB;;AAKA,WAAO,EAACD,YAAD,EAAQE,wBAAR,EAAP;AACH;;AAEDP,KAAKiB,EAAL,CAAQ,yBAAR,EAAmC,UAACC,CAAD,EAAO;AACtC,QAAMC,YAAYf,eAAlB;;AAEA,QAAMgB,cAAcjB,WAAW,yBAAX,EAAsC;AACtD,uBAAe,EAACgB,oBAAD;AADuC,KAAtC,CAApB;;AAIA,QAAME,UAAU;AACZC,aAAKpB,MAAMI,IAAN,EADO;AAEZiB,iBAAS;AACLC,kBAAM,MADD;AAELC,yBAAa,MAFR;AAGLC,mBAAO,MAHF;AAILC,sBAAU,YAJL;AAKLC,oBAAQ,YALH;AAMLC,yBAAa,EANR;AAOLC,wBAAY,CAPP;AAQLC,uBAAW;AARN;AAFG,KAAhB;;AAcA,QAAMC,QAAQ;AACVC,gBADU,oBACAC,KADA,EACO;AAAA;;AACbhB,cAAEiB,EAAF,uBAAKD,KAAL;AAAA;AAAA;AAAA;AAAA,gBAAY,UAAZ,EAAwB,qCAAxB;AACAhB,cAAEkB,GAAF;AACH;AAJS,KAAd;;AAOAhB,gBAAYC,OAAZ,EAAqBW,KAArB;AACH,CA7BD;;AA+BAhC,KAAKiB,EAAL,CAAQ,kCAAR,EAA4C,UAACC,CAAD,EAAO;AAC/C,QAAMC,YAAYf,eAAlB;;AAEA,QAAMgB,cAAcjB,WAAW,yBAAX,EAAsC;AACtD,uBAAe,EAACgB,oBAAD;AADuC,KAAtC,CAApB;;AAIA,QAAME,UAAU;AACZC,aAAKpB,MAAMI,IAAN,EADO;AAEZiB,iBAAS;AACLC,kBAAM,MADD;AAELC,yBAAa,MAFR;AAGLC,mBAAO,MAHF;AAILC,sBAAU,YAJL;AAKLC,oBAAQ,YALH;AAMLC,yBAAa,EANR;AAOLC,wBAAY,CAPP;AAQLC,uBAAW;AARN;AAFG,KAAhB;;AAcA,QAAMC,QAAQ,SAARA,KAAQ,CAACK,IAAD,EAAU;AAAA;;AACpBnB,UAAEiB,EAAF,yBAAK,wCAAKX,IAAV;AAAA;AAAA;AAAA;AAAA,YAAgB,OAAhB,EAAyB,gCAAzB;AACAN,UAAEkB,GAAF;AACH,KAHD;;AAKAhB,gBAAYC,OAAZ,EAAqBW,KAArB;AACH,CA3BD","file":"create-trial.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\n/**\n * Mock sequelize\n * @returns {Object} mocked sequelize object\n */\nfunction mockSequelize () {\n    // stub properties\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n\n    model\n    .withArgs('trial')\n    .returns({\n        find () {\n            return Promise.resolve({});\n        },\n        create () {\n            return Promise.resolve({\n                id: 1,\n                addStages () {\n                    return Promise.resolve();\n                }\n            });\n        }\n    });\n\n    model\n    .withArgs('stage')\n    .returns({\n        find () {\n            return Promise.resolve({});\n        },\n        create () {\n            return Promise.resolve();\n        }\n    });\n\n    transaction.returns(Promise.resolve({\n        commit: sinon.stub(),\n        rollback: sinon.stub()\n    }));\n\n    return {model, transaction};\n}\n\ntest.cb('when a trial is created', (t) => {\n    const sequelize = mockSequelize();\n\n    const createTrial = proxyquire('../handler/create-trial', {\n        '../../model': {sequelize}\n    });\n\n    const request = {\n        log: sinon.stub(),\n        payload: {\n            name: 'test',\n            description: 'test',\n            IRBID: 'test',\n            IRBStart: '2000-01-01',\n            IRBEnd: '2001-01-01',\n            targetCount: 10,\n            stagecount: 3,\n            stageName: 'one,two,three'\n        }\n    };\n\n    const reply = {\n        redirect (route) {\n            t.is(route, '/trial/1', 'it should redirect to the new trial');\n            t.end();\n        }\n    };\n\n    createTrial(request, reply);\n});\n\ntest.cb('when stage number does not match', (t) => {\n    const sequelize = mockSequelize();\n\n    const createTrial = proxyquire('../handler/create-trial', {\n        '../../model': {sequelize}\n    });\n\n    const request = {\n        log: sinon.stub(),\n        payload: {\n            name: 'test',\n            description: 'test',\n            IRBID: 'test',\n            IRBStart: '2000-01-01',\n            IRBEnd: '2001-01-01',\n            targetCount: 10,\n            stagecount: 3,\n            stageName: 'one,two'\n        }\n    };\n\n    const reply = (data) => {\n        t.is(data.name, 'Error', 'it should have an Error object');\n        t.end();\n    };\n\n    createTrial(request, reply);\n});\n"]}