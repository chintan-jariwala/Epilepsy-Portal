{"version":3,"sources":["create-survey-instance.js"],"names":["test","require","sinon","proxyquire","t","model","stub","withArgs","returns","findOne","addSurvey_instance","resolve","findById","create","createSurveyInstance","sequelize","transaction","notThrows","Date","throws","NaN"],"mappings":"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","file":"create-survey-instance.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\ntest('when survey can be created', (t) => {\n    const model = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        findOne () {\n            return {\n                addSurvey_instance () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('survey_template')\n    .returns({\n        findById () {\n            return {\n                addSurvey_instance () {\n                    return Promise.resolve();\n                }\n            };\n        }\n    });\n\n    model\n    .withArgs('survey_instance')\n    .returns({\n        create () {\n            return Promise.resolve();\n        }\n    });\n\n    const createSurveyInstance = proxyquire('../helper/create-survey-instance', {\n        '../../model': {\n            sequelize: {\n                model\n            }\n        }\n    });\n\n    const transaction = sinon.stub();\n\n    t.notThrows(createSurveyInstance(1000, 1, new Date(), 1, 'day', transaction), 'it should resolve');\n});\n\ntest('when patient is invalid', (t) => {\n    const model = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        findOne () {\n            return Promise.resolve(null);\n        }\n    });\n\n    model\n    .withArgs('survey_template')\n    .returns({\n        findById () {\n            return Promise.resolve();\n        }\n    });\n\n    model\n    .withArgs('survey_instance')\n    .returns({\n        create () {\n            return Promise.resolve();\n        }\n    });\n\n    const createSurveyInstance = proxyquire('../helper/create-survey-instance', {\n        '../../model': {\n            sequelize: {\n                model\n            }\n        }\n    });\n\n    t.throws(\n        createSurveyInstance(NaN, 1, new Date(), 1, 'day', sinon.stub()),\n        'patient does not exist',\n        'it should reject'\n    );\n});\n\ntest('when survey template is invalid', (t) => {\n    const model = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        findOne () {\n            return Promise.resolve({});\n        }\n    });\n\n    model\n    .withArgs('survey_template')\n    .returns({\n        findById () {\n            return Promise.resolve(null);\n        }\n    });\n\n    model\n    .withArgs('survey_instance')\n    .returns({\n        create () {\n            return Promise.resolve({});\n        }\n    });\n\n    const createSurveyInstance = proxyquire('../helper/create-survey-instance', {\n        '../../model': {\n            sequelize: {\n                model\n            }\n        }\n    });\n\n    const transaction = sinon.stub();\n\n    t.throws(\n        createSurveyInstance(1000, NaN, new Date(), 1, 'day', transaction),\n        'survey template does not exist',\n        'it should reject'\n    );\n});\n"]}