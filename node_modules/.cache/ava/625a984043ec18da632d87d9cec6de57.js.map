{"version":3,"sources":["process-survey-instances.js"],"names":["test","require","moment","processSurveyInstances","t","open","close","completed","result","calculateTimeLeft","is","pickTimeLeft","expectedKeys","true","Array","deepEqual","keys","pickDates","data","startTime","dateCompleted","length"],"mappings":"AAAA;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,yBAAyBF,QAAQ,oCAAR,CAA/B;;AAEAD,KAAK,2DAAL,EAAkE,UAACI,CAAD,EAAO;AAAA;;AACrE,QAAMC,OAAOH,OAAO,YAAP,CAAb;AACA,QAAMI,QAAQJ,OAAO,YAAP,CAAd;AACA,QAAMK,YAAYL,OAAO,YAAP,CAAlB;;AAEA,QAAMM,SAASL,uBAAuBM,iBAAvB,CAAyCJ,IAAzC,EAA+CC,KAA/C,EAAsDC,SAAtD,CAAf;;AAEAH,MAAEM,EAAF,uBAAKF,MAAL;AAAA;AAAA;AAAA;AAAA,QAAa,EAAb,EAAiB,sCAAjB;AACH,CARD;;AAUAR,KAAK,sCAAL,EAA6C,UAACI,CAAD,EAAO;AAAA;;AAChD,QAAMC,OAAOH,OAAO,YAAP,CAAb;AACA,QAAMI,QAAQJ,OAAO,YAAP,CAAd;AACA,QAAMK,YAAYL,OAAO,YAAP,CAAlB;;AAEA,QAAMM,SAASL,uBAAuBM,iBAAvB,CAAyCJ,IAAzC,EAA+CC,KAA/C,EAAsDC,SAAtD,CAAf;;AAEAH,MAAEM,EAAF,yBAAKF,MAAL;AAAA;AAAA;AAAA;AAAA,QAAa,CAAb,EAAgB,kCAAhB;AACH,CARD;;AAUAR,KAAK,yCAAL,EAAgD,UAACI,CAAD,EAAO;AAAA;;AACnD,QAAMC,OAAOH,OAAO,YAAP,CAAb;AACA,QAAMI,QAAQJ,OAAO,YAAP,CAAd;AACA,QAAMK,YAAYL,OAAO,YAAP,CAAlB;;AAEA,QAAMM,SAASL,uBAAuBM,iBAAvB,CAAyCJ,IAAzC,EAA+CC,KAA/C,EAAsDC,SAAtD,CAAf;;AAEAH,MAAEM,EAAF,yBAAKF,MAAL;AAAA;AAAA;AAAA;AAAA,QAAa,CAAb,EAAgB,kCAAhB;AACH,CARD;;AAUAR,KAAK,8BAAL,EAAqC,UAACI,CAAD,EAAO;AAAA;AAAA;AAAA;;AACxC,QAAMI,SAASL,uBAAuBQ,YAAvB,CAAoC,EAApC,CAAf;AACA,QAAMC,eAAe,CACjB,OADiB,EAEjB,iBAFiB,EAGjB,aAHiB,EAIjB,kBAJiB,EAKjB,MALiB,CAArB;;AAQAR,MAAES,IAAF,yBAAO,+DAAkBC,KAAlB,sBAAP;AAAA;AAAA;AAAA;AAAA,QAAgC,2BAAhC;AACAV,MAAEW,SAAF,yBAAY,iDAAOC,IAAP,aAAY,sDAAO,CAAP,CAAZ,6BAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoCJ,YAApC;AAAA;AAAA;AAAA;AAAA,QAAkD,yCAAlD;AACH,CAZD;;AAcAZ,KAAK,6CAAL,EAAoD,UAACI,CAAD,EAAO;AAAA;AAAA;;AACvD,QAAMI,SAASL,uBAAuBc,SAAvB,CAAiC,EAAjC,CAAf;;AAEAb,MAAEW,SAAF,yBAAYP,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoB,EAApB;AAAA;AAAA;AAAA;AAAA,QAAwB,yBAAxB;AACH,CAJD;;AAMAR,KAAK,6CAAL,EAAoD,UAACI,CAAD,EAAO;AAAA;;AACvD,QAAMc,OAAO,CACT;AACIC,mBAAW,yCADf;AAEIC,uBAAe;AAFnB,KADS,CAAb;;AAOA,QAAMZ,SAASL,uBAAuBc,SAAvB,CAAiCC,IAAjC,CAAf;;AAEAd,MAAEM,EAAF,yBAAK,0CAAOW,MAAZ;AAAA;AAAA;AAAA;AAAA,QAAoB,CAApB,EAAuB,0BAAvB;AACH,CAXD;;AAaArB,KAAK,8CAAL,EAAqD,UAACI,CAAD,EAAO;AAAA;;AACxD,QAAMc,OAAO,CACT;AACIC,mBAAW,yCADf;AAEIC,uBAAe;AAFnB,KADS,EAKT;AACID,mBAAW,yCADf;AAEIC,uBAAe;AAFnB,KALS,CAAb;;AAWA,QAAMZ,SAASL,uBAAuBc,SAAvB,CAAiCC,IAAjC,CAAf;;AAEAd,MAAEM,EAAF,2BAAK,2CAAOW,MAAZ;AAAA;AAAA;AAAA;AAAA,QAAoB,CAApB,EAAuB,4BAAvB;AACH,CAfD;;AAiBArB,KAAK,8CAAL,EAAqD,UAACI,CAAD,EAAO;AAAA;AAAA;;AACxD,QAAMI,SAASL,uBAAuB,EAAvB,CAAf;;AAEA,QAAMS,eAAe,CACjB,QADiB,EAEjB,UAFiB,CAArB;;AAKAR,MAAEW,SAAF,2BAAY,kDAAOC,IAAP,cAAYR,MAAZ,6BAAZ;AAAA;AAAA;AAAA;AAAA,kCAAiCI,YAAjC;AAAA;AAAA;AAAA;AAAA,QAA+C,4CAA/C;AACH,CATD","file":"process-survey-instances.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst moment = require('moment');\nconst processSurveyInstances = require('../helper/process-survey-instances');\n\ntest('when survey is completed in one day with two days allowed', (t) => {\n    const open = moment('2000-01-01');\n    const close = moment('2000-01-03');\n    const completed = moment('2000-01-02');\n\n    const result = processSurveyInstances.calculateTimeLeft(open, close, completed);\n\n    t.is(result, 50, 'it should have 50% of time remaining');\n});\n\ntest('when survey is completed at end time', (t) => {\n    const open = moment('2000-01-01');\n    const close = moment('2000-01-02');\n    const completed = moment('2000-01-02');\n\n    const result = processSurveyInstances.calculateTimeLeft(open, close, completed);\n\n    t.is(result, 0, 'it should have no time remaining');\n});\n\ntest('when survey is completed after end time', (t) => {\n    const open = moment('2000-01-01');\n    const close = moment('2000-01-02');\n    const completed = moment('2000-01-03');\n\n    const result = processSurveyInstances.calculateTimeLeft(open, close, completed);\n\n    t.is(result, 0, 'it should have no time remaining');\n});\n\ntest('when chart data is generated', (t) => {\n    const result = processSurveyInstances.pickTimeLeft([]);\n    const expectedKeys = [\n        'label',\n        'backgroundColor',\n        'borderColor',\n        'pointBorderColor',\n        'data'\n    ];\n\n    t.true(result instanceof Array, 'it should return an array');\n    t.deepEqual(Object.keys(result[0]), expectedKeys, 'it should have keys needed for chart js');\n});\n\ntest('when chart axes are generated with no dates', (t) => {\n    const result = processSurveyInstances.pickDates([]);\n\n    t.deepEqual(result, [], 'it should have no dates');\n});\n\ntest('when chart axes are generated with one date', (t) => {\n    const data = [\n        {\n            startTime: 'Sat Jan 01 2000 00:00:00 GMT-0700 (MST)',\n            dateCompleted: 'Sat Jan 02 2000 00:00:00 GMT-0700 (MST)'\n        }\n    ];\n\n    const result = processSurveyInstances.pickDates(data);\n\n    t.is(result.length, 2, 'it should have two dates');\n});\n\ntest('when chart axes are generated with two dates', (t) => {\n    const data = [\n        {\n            startTime: 'Sat Jan 01 2000 00:00:00 GMT-0700 (MST)',\n            dateCompleted: 'Sat Jan 02 2000 00:00:00 GMT-0700 (MST)'\n        },\n        {\n            startTime: 'Sat Jan 01 2000 00:00:00 GMT-0700 (MST)',\n            dateCompleted: 'Sat Jan 02 2000 00:00:00 GMT-0700 (MST)'\n        }\n    ];\n\n    const result = processSurveyInstances.pickDates(data);\n\n    t.is(result.length, 3, 'it should have three dates');\n});\n\ntest('when it generates the full chart information', (t) => {\n    const result = processSurveyInstances([]);\n\n    const expectedKeys = [\n        'labels',\n        'datasets'\n    ];\n\n    t.deepEqual(Object.keys(result), expectedKeys, 'it should have the keys needed by chart js');\n});\n"]}