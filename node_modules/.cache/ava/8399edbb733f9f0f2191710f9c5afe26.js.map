{"version":3,"sources":["deactivate-patient.js"],"names":["test","require","sinon","proxyquire","cb","t","model","stub","transaction","withArgs","returns","findOne","destroy","resolve","commit","deactivatePatient","sequelize","request","log","params","pin","reply","pass","end","rollback","reject","data","is","name"],"mappings":"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","file":"deactivate-patient.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\n\ntest.cb('when patient exists', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        findOne () {\n            return {\n                destroy () {\n                    return;\n                }\n            };\n        }\n    });\n\n    transaction.returns(Promise.resolve({\n        commit () {\n            return Promise.resolve();\n        }\n    }));\n\n    const deactivatePatient = proxyquire('../handler/deactivate-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = () => {\n        t.pass('it should resolve');\n        t.end();\n    };\n\n    deactivatePatient(request, reply);\n});\n\ntest.cb('when patient does not exist', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        findOne () {\n            return null;\n        }\n    });\n\n    transaction.returns(Promise.resolve({\n        rollback () {\n            return Promise.resolve();\n        }\n    }));\n\n    const deactivatePatient = proxyquire('../handler/deactivate-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = () => {\n        t.pass('it should resolve');\n        t.end();\n    };\n\n    deactivatePatient(request, reply);\n});\n\ntest.cb('when there is a conflict', (t) => {\n    const model = sinon.stub();\n    const transaction = sinon.stub();\n\n    model\n    .withArgs('patient')\n    .returns({\n        findOne () {\n            return Promise.reject();\n        }\n    });\n\n    transaction.returns(Promise.resolve({\n        rollback () {\n            return Promise.resolve();\n        }\n    }));\n\n    const deactivatePatient = proxyquire('../handler/deactivate-patient', {\n        '../../model': {\n            sequelize: {\n                model,\n                transaction\n            }\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = (data) => {\n        t.is(data.name, 'Error', 'it should have error object');\n        t.end();\n    };\n\n    deactivatePatient(request, reply);\n});\n"]}