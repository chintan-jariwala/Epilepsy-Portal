{"version":3,"sources":["deduplicate.js"],"names":["test","require","deduplicate","t","data","property","properties","result","expectedResult","deepEqual","one","two"],"mappings":"AAAA;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,cAAcD,QAAQ,uBAAR,CAApB;;AAEAD,KAAK,gCAAL,EAAuC,UAACG,CAAD,EAAO;AAAA;AAAA;;AAC1C,QAAMC,OAAO,CACT;AACIC,kBAAU;AADd,KADS,EAIT;AACIA,kBAAU;AADd,KAJS,CAAb;;AASA,QAAMC,aAAa,CACf,UADe,CAAnB;;AAIA,QAAMC,SAASL,YAAYE,IAAZ,EAAkBE,UAAlB,CAAf;;AAEA,QAAME,iBAAiB,CACnB;AACIH,kBAAU;AADd,KADmB,EAInB;AACIA,kBAAU;AADd,KAJmB,CAAvB;;AASAF,MAAEM,SAAF,uBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,qCAApC;AACH,CA1BD;;AA4BAR,KAAK,4BAAL,EAAmC,UAACG,CAAD,EAAO;AAAA;AAAA;;AACtC,QAAMC,OAAO,CACT;AACIC,kBAAU;AADd,KADS,EAIT;AACIA,kBAAU;AADd,KAJS,EAOT;AACIA,kBAAU;AADd,KAPS,CAAb;;AAYA,QAAMC,aAAa,CACf,UADe,CAAnB;;AAIA,QAAMC,SAASL,YAAYE,IAAZ,EAAkBE,UAAlB,CAAf;;AAEAH,MAAEM,SAAF,yBAAYL,IAAZ;AAAA;AAAA;AAAA;AAAA,gCAAkBG,MAAlB;AAAA;AAAA;AAAA;AAAA,QAA0B,+BAA1B;AACH,CApBD;;AAsBAP,KAAK,yCAAL,EAAgD,UAACG,CAAD,EAAO;AAAA;AAAA;;AACnD,QAAMC,OAAO,CACT;AACIC,kBAAU;AADd,KADS,EAIT;AACIA,kBAAU;AADd,KAJS,EAOT;AACIA,kBAAU;AADd,KAPS,EAUT;AACIA,kBAAU;AADd,KAVS,CAAb;;AAeA,QAAMC,aAAa,CACf,UADe,CAAnB;;AAIA,QAAMC,SAASL,YAAYE,IAAZ,EAAkBE,UAAlB,CAAf;;AAEA,QAAME,iBAAiB,CACnB;AACIH,kBAAU;AADd,KADmB,EAInB;AACIA,kBAAU;AADd,KAJmB,EAOnB;AACIA,kBAAU;AADd,KAPmB,EAUnB;AACIA,kBAAU;AADd,KAVmB,CAAvB;;AAeAF,MAAEM,SAAF,yBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,yCAApC;AACH,CAtCD;;AAwCAR,KAAK,+BAAL,EAAsC,UAACG,CAAD,EAAO;AAAA;AAAA;;AACzC,QAAMC,OAAO,CACT,EADS,EAET,EAFS,CAAb;;AAKA,QAAME,aAAa,CACf,UADe,CAAnB;;AAIA,QAAMC,SAASL,YAAYE,IAAZ,EAAkBE,UAAlB,CAAf;;AAEA,QAAME,iBAAiB,CACnB;AACIH,kBAAU;AADd,KADmB,EAInB;AACIA,kBAAU;AADd,KAJmB,CAAvB;;AASAF,MAAEM,SAAF,yBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,gCAApC;AACH,CAtBD;;AAwBAR,KAAK,iDAAL,EAAwD,UAACG,CAAD,EAAO;AAAA;AAAA;;AAC3D,QAAMC,OAAO,CACT;AACIM,aAAK,KADT;AAEIC,aAAK;AAFT,KADS,EAKT;AACID,aAAK,KADT;AAEIC,aAAK;AAFT,KALS,EAST;AACID,aAAK,KADT;AAEIC,aAAK;AAFT,KATS,CAAb;;AAeA,QAAML,aAAa,CACf,KADe,EAEf,KAFe,CAAnB;;AAKA,QAAMC,SAASL,YAAYE,IAAZ,EAAkBE,UAAlB,CAAf;;AAEA,QAAME,iBAAiB,CACnB;AACIE,aAAK,KADT;AAEIC,aAAK;AAFT,KADmB,EAKnB;AACID,aAAK,EADT;AAEIC,aAAK;AAFT,KALmB,EASnB;AACID,aAAK,KADT;AAEIC,aAAK;AAFT,KATmB,CAAvB;;AAeAR,MAAEM,SAAF,yBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,kCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,kDAApC;AACH,CAvCD;;AAyCAR,KAAK,wCAAL,EAA+C,UAACG,CAAD,EAAO;AAAA;AAAA;;AAClD,QAAMC,OAAO,CACT;AACIC,kBAAU;AADd,KADS,EAIT;AACIA,kBAAU;AADd,KAJS,EAOT;AACIA,kBAAU;AADd,KAPS,EAUT;AACIA,kBAAU;AADd,KAVS,EAaT;AACIA,kBAAU;AADd,KAbS,EAgBT;AACIA,kBAAU;AADd,KAhBS,CAAb;;AAqBA,QAAMC,aAAa,CACf,UADe,CAAnB;;AAIA,QAAMC,SAASL,YAAYE,IAAZ,EAAkBE,UAAlB,CAAf;;AAEA,QAAME,iBAAiB,CACnB;AACIH,kBAAU;AADd,KADmB,EAInB;AACIA,kBAAU;AADd,KAJmB,EAOnB;AACIA,kBAAU;AADd,KAPmB,EAUnB;AACIA,kBAAU;AADd,KAVmB,EAanB;AACIA,kBAAU;AADd,KAbmB,EAgBnB;AACIA,kBAAU;AADd,KAhBmB,CAAvB;;AAqBAF,MAAEM,SAAF,2BAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,kCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,0CAApC;AACH,CAlDD","file":"deduplicate.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst deduplicate = require('../helper/deduplicate');\n\ntest('when properties are duplicated', (t) => {\n    const data = [\n        {\n            property: 'one'\n        },\n        {\n            property: 'one'\n        }\n    ];\n\n    const properties = [\n        'property'\n    ];\n\n    const result = deduplicate(data, properties);\n\n    const expectedResult = [\n        {\n            property: 'one'\n        },\n        {\n            property: ''\n        }\n    ];\n\n    t.deepEqual(result, expectedResult, 'it should have only the first value');\n});\n\ntest('when all values are unique', (t) => {\n    const data = [\n        {\n            property: 'one'\n        },\n        {\n            property: 'two'\n        },\n        {\n            property: 'three'\n        }\n    ];\n\n    const properties = [\n        'property'\n    ];\n\n    const result = deduplicate(data, properties);\n\n    t.deepEqual(data, result, 'it should have all the values');\n});\n\ntest('when value is unique in multiple places', (t) => {\n    const data = [\n        {\n            property: 'one'\n        },\n        {\n            property: 'one'\n        },\n        {\n            property: 'two'\n        },\n        {\n            property: 'one'\n        }\n    ];\n\n    const properties = [\n        'property'\n    ];\n\n    const result = deduplicate(data, properties);\n\n    const expectedResult = [\n        {\n            property: 'one'\n        },\n        {\n            property: ''\n        },\n        {\n            property: 'two'\n        },\n        {\n            property: 'one'\n        }\n    ];\n\n    t.deepEqual(result, expectedResult, 'it should keep second unique appearance');\n});\n\ntest('when there missing properties', (t) => {\n    const data = [\n        {},\n        {}\n    ];\n\n    const properties = [\n        'property'\n    ];\n\n    const result = deduplicate(data, properties);\n\n    const expectedResult = [\n        {\n            property: ''\n        },\n        {\n            property: ''\n        }\n    ];\n\n    t.deepEqual(result, expectedResult, 'it should enter an empty value');\n});\n\ntest('when multiple properties are being deduplicated', (t) => {\n    const data = [\n        {\n            one: 'abc',\n            two: 'abc'\n        },\n        {\n            one: 'abc',\n            two: 'xyz'\n        },\n        {\n            one: 'xyz',\n            two: 'xyz'\n        }\n    ];\n\n    const properties = [\n        'one',\n        'two'\n    ];\n\n    const result = deduplicate(data, properties);\n\n    const expectedResult = [\n        {\n            one: 'abc',\n            two: 'abc'\n        },\n        {\n            one: '',\n            two: 'xyz'\n        },\n        {\n            one: 'xyz',\n            two: ''\n        }\n    ];\n\n    t.deepEqual(result, expectedResult, 'it should deduplicate each property independenty');\n});\n\ntest('when multiple types of values are used', (t) => {\n    const data = [\n        {\n            property: 'one'\n        },\n        {\n            property: 'one'\n        },\n        {\n            property: 1\n        },\n        {\n            property: 1\n        },\n        {\n            property: true\n        },\n        {\n            property: true\n        }\n    ];\n\n    const properties = [\n        'property'\n    ];\n\n    const result = deduplicate(data, properties);\n\n    const expectedResult = [\n        {\n            property: 'one'\n        },\n        {\n            property: ''\n        },\n        {\n            property: 1\n        },\n        {\n            property: ''\n        },\n        {\n            property: true\n        },\n        {\n            property: ''\n        }\n    ];\n\n    t.deepEqual(result, expectedResult, 'it should deduplicate any primitive type');\n});\n"]}