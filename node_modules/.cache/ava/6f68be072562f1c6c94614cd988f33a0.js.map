{"version":3,"sources":["process-compliance-count.js"],"names":["test","require","processComplianceCount","t","data","expiredCount","result","expectedResult","deepEqual"],"mappings":"AAAA;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,yBAAyBD,QAAQ,oCAAR,CAA/B;;AAEAD,KAAK,qCAAL,EAA4C,UAACG,CAAD,EAAO;AAAA;AAAA;;AAC/C,QAAMC,OAAO,CACT;AACIC,sBAAc;AADlB,KADS,CAAb;;AAMA,QAAMC,SAASJ,uBAAuBE,IAAvB,CAAf;;AAEA,QAAMG,iBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AAEAJ,MAAEK,SAAF,uBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,qCAApC;AACH,CAZD;;AAcAP,KAAK,iDAAL,EAAwD,UAACG,CAAD,EAAO;AAAA;AAAA;;AAC3D,QAAMC,OAAO,CACT;AACIC,sBAAc;AADlB,KADS,EAIT;AACIA,sBAAc;AADlB,KAJS,CAAb;;AASA,QAAMC,SAASJ,uBAAuBE,IAAvB,CAAf;;AAEA,QAAMG,iBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AAEAJ,MAAEK,SAAF,yBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,4CAApC;AACH,CAfD;;AAiBAP,KAAK,kDAAL,EAAyD,UAACG,CAAD,EAAO;AAAA;AAAA;;AAC5D,QAAMC,OAAO,CACT;AACIC,sBAAc;AADlB,KADS,CAAb;;AAMA,QAAMC,SAASJ,uBAAuBE,IAAvB,CAAf;;AAEA,QAAMG,iBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AAEAJ,MAAEK,SAAF,yBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,yCAApC;AACH,CAZD;;AAcAP,KAAK,4DAAL,EAAmE,UAACG,CAAD,EAAO;AAAA;AAAA;;AACtE,QAAMC,OAAO,CACT;AACIC,sBAAc;AADlB,KADS,EAIT;AACIA,sBAAc;AADlB,KAJS,EAOT;AACIA,sBAAc;AADlB,KAPS,CAAb;;AAYA,QAAMC,SAASJ,uBAAuBE,IAAvB,CAAf;;AAEA,QAAMG,iBAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AAEAJ,MAAEK,SAAF,yBAAYF,MAAZ;AAAA;AAAA;AAAA;AAAA,gCAAoBC,cAApB;AAAA;AAAA;AAAA;AAAA,QAAoC,kDAApC;AACH,CAlBD","file":"process-compliance-count.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst processComplianceCount = require('../helper/process-compliance-count');\n\ntest('when patient has no expired surveys', (t) => {\n    const data = [\n        {\n            expiredCount: 0\n        }\n    ];\n\n    const result = processComplianceCount(data);\n\n    const expectedResult = [0, 0, 1];\n\n    t.deepEqual(result, expectedResult, 'it should show patient is compliant');\n});\n\ntest('when patient\\'s have one or two expired surveys', (t) => {\n    const data = [\n        {\n            expiredCount: 1\n        },\n        {\n            expiredCount: 2\n        }\n    ];\n\n    const result = processComplianceCount(data);\n\n    const expectedResult = [0, 2, 0];\n\n    t.deepEqual(result, expectedResult, 'it should show patients are semi-compliant');\n});\n\ntest('when a patient has three or more expired surveys', (t) => {\n    const data = [\n        {\n            expiredCount: 3\n        }\n    ];\n\n    const result = processComplianceCount(data);\n\n    const expectedResult = [1, 0, 0];\n\n    t.deepEqual(result, expectedResult, 'it should show patient is non-compliant');\n});\n\ntest('when there are multiple patients with different compliance', (t) => {\n    const data = [\n        {\n            expiredCount: 0\n        },\n        {\n            expiredCount: 1\n        },\n        {\n            expiredCount: 3\n        }\n    ];\n\n    const result = processComplianceCount(data);\n\n    const expectedResult = [1, 1, 1];\n\n    t.deepEqual(result, expectedResult, 'it should show correct overall compliance counts');\n});\n"]}