'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');

test('when survey can be created', function (t) {
    var model = sinon.stub();

    model.withArgs('patient').returns({
        findOne: function findOne() {
            return {
                addSurvey_instance: function addSurvey_instance() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('survey_template').returns({
        findById: function findById() {
            return {
                addSurvey_instance: function addSurvey_instance() {
                    return _promise2.default.resolve();
                }
            };
        }
    });

    model.withArgs('survey_instance').returns({
        create: function create() {
            return _promise2.default.resolve();
        }
    });

    var createSurveyInstance = proxyquire('../helper/create-survey-instance', {
        '../../model': {
            sequelize: {
                model: model
            }
        }
    });

    var transaction = sinon.stub();

    t.notThrows(createSurveyInstance(1000, 1, new Date(), 1, 'day', transaction), 'it should resolve');
});

test('when patient is invalid', function (t) {
    var model = sinon.stub();

    model.withArgs('patient').returns({
        findOne: function findOne() {
            return _promise2.default.resolve(null);
        }
    });

    model.withArgs('survey_template').returns({
        findById: function findById() {
            return _promise2.default.resolve();
        }
    });

    model.withArgs('survey_instance').returns({
        create: function create() {
            return _promise2.default.resolve();
        }
    });

    var createSurveyInstance = proxyquire('../helper/create-survey-instance', {
        '../../model': {
            sequelize: {
                model: model
            }
        }
    });

    t.throws(createSurveyInstance(NaN, 1, new Date(), 1, 'day', sinon.stub()), 'patient does not exist', 'it should reject');
});

test('when survey template is invalid', function (t) {
    var model = sinon.stub();

    model.withArgs('patient').returns({
        findOne: function findOne() {
            return _promise2.default.resolve({});
        }
    });

    model.withArgs('survey_template').returns({
        findById: function findById() {
            return _promise2.default.resolve(null);
        }
    });

    model.withArgs('survey_instance').returns({
        create: function create() {
            return _promise2.default.resolve({});
        }
    });

    var createSurveyInstance = proxyquire('../helper/create-survey-instance', {
        '../../model': {
            sequelize: {
                model: model
            }
        }
    });

    var transaction = sinon.stub();

    t.throws(createSurveyInstance(1000, NaN, new Date(), 1, 'day', transaction), 'survey template does not exist', 'it should reject');
});
//# sourceMappingURL=../../node_modules/.cache/ava/58879a26e52ac643b6236803ec74d7b9.js.map