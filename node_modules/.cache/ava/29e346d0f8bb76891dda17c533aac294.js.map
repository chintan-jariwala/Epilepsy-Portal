{"version":3,"sources":["patient.js"],"names":["test","require","sinon","proxyquire","QueryTypes","SELECT","cb","t","query","stub","onFirstCall","returns","resolve","pin","stage","onSecondCall","id","startTime","Date","endTime","userSubmissionTime","state","surveyTemplateId","stageName","surveyTemplateName","onThirdCall","name","patientCSV","sequelize","request","log","params","reply","view","template","data","is","true","surveys","Array","length","end","title","code"],"mappings":"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","file":"patient.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst sinon = require('sinon');\nconst proxyquire = require('proxyquire');\nconst QueryTypes = {\n    SELECT: 'select'\n};\n\ntest.cb('when patient has one survey', (t) => {\n    const query = sinon.stub();\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve({\n        pin: 1,\n        stage: 'example'\n    }));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve([\n        {\n            id: 1,\n            startTime: new Date(),\n            endTime: new Date(),\n            userSubmissionTime: new Date(),\n            state: 'completed',\n            surveyTemplateId: 1,\n            stageName: 'example',\n            surveyTemplateName: 'example'\n        }\n    ]));\n\n    query\n    .onThirdCall()\n    .returns(Promise.resolve({\n        id: 1,\n        name: 'example'\n    }));\n\n    const patientCSV = proxyquire('../handler/patient', {\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'patient', 'it should render patient view');\n            t.true(data.surveys instanceof Array, 'it should have an array of surveys');\n            t.is(data.surveys.length, 1, 'it should have one survey');\n            t.end();\n        }\n    };\n\n    patientCSV(request, reply);\n});\n\ntest.cb('when patient has no surveys', (t) => {\n    const query = sinon.stub();\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve({\n        pin: 1,\n        stage: 'example'\n    }));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onThirdCall()\n    .returns(Promise.resolve({\n        id: 1,\n        name: 'example'\n    }));\n\n    const patientCSV = proxyquire('../handler/patient', {\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, 'patient', 'it should render patient view');\n            t.is(data.surveys.length, 0, 'it should have no surveys');\n            t.end();\n        }\n    };\n\n    patientCSV(request, reply);\n});\n\ntest.cb('when patient does not exist', (t) => {\n    const query = sinon.stub();\n\n    query\n    .onFirstCall()\n    .returns(Promise.resolve(null));\n\n    query\n    .onSecondCall()\n    .returns(Promise.resolve([]));\n\n    query\n    .onThirdCall()\n    .returns(Promise.resolve(null));\n\n    const patientCSV = proxyquire('../handler/patient', {\n        '../../model': {\n            sequelize: {query, QueryTypes}\n        }\n    });\n\n    const request = {\n        log: sinon.stub(),\n        params: {\n            pin: 1\n        }\n    };\n\n    const reply = {\n        view (template, data) {\n            t.is(template, '404', 'it should render not found page');\n            t.is(data.title, 'Not Found', 'it should have \\'not found\\' as the title');\n\n            return {\n                code (code) {\n                    t.is(code, 404, 'it should have not found status code');\n                    t.end();\n                }\n            };\n        }\n    };\n\n    patientCSV(request, reply);\n});\n"]}