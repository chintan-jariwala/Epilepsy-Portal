'use strict';

var _promise = require('/Users/dpurbey/Desktop/sem-2/ser590/Epilepsy/Portal/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var test = require('ava');
var sinon = require('sinon');
var proxyquire = require('proxyquire');

test.cb('when patient exists', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();

    model.withArgs('patient').returns({
        findOne: function findOne() {
            return {
                destroy: function destroy() {
                    return;
                }
            };
        }
    });

    transaction.returns(_promise2.default.resolve({
        commit: function commit() {
            return _promise2.default.resolve();
        }
    }));

    var deactivatePatient = proxyquire('../handler/deactivate-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            pin: 1
        }
    };

    var reply = function reply() {
        t.pass('it should resolve');
        t.end();
    };

    deactivatePatient(request, reply);
});

test.cb('when patient does not exist', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();

    model.withArgs('patient').returns({
        findOne: function findOne() {
            return null;
        }
    });

    transaction.returns(_promise2.default.resolve({
        rollback: function rollback() {
            return _promise2.default.resolve();
        }
    }));

    var deactivatePatient = proxyquire('../handler/deactivate-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            pin: 1
        }
    };

    var reply = function reply() {
        t.pass('it should resolve');
        t.end();
    };

    deactivatePatient(request, reply);
});

test.cb('when there is a conflict', function (t) {
    var model = sinon.stub();
    var transaction = sinon.stub();

    model.withArgs('patient').returns({
        findOne: function findOne() {
            return _promise2.default.reject();
        }
    });

    transaction.returns(_promise2.default.resolve({
        rollback: function rollback() {
            return _promise2.default.resolve();
        }
    }));

    var deactivatePatient = proxyquire('../handler/deactivate-patient', {
        '../../model': {
            sequelize: {
                model: model,
                transaction: transaction
            }
        }
    });

    var request = {
        log: sinon.stub(),
        params: {
            pin: 1
        }
    };

    var reply = function reply(data) {
        var _rec = new _powerAssertRecorder();

        t.is(_rec._expr(_rec._capt(_rec._capt(data, 'arguments/0/object').name, 'arguments/0'), {
            content: 't.is(data.name, \'Error\', \'it should have error object\')',
            filepath: 'controller/handler-test/deactivate-patient.js',
            line: 130
        }), 'Error', 'it should have error object');
        t.end();
    };

    deactivatePatient(request, reply);
});
//# sourceMappingURL=../../node_modules/.cache/ava/8399edbb733f9f0f2191710f9c5afe26.js.map