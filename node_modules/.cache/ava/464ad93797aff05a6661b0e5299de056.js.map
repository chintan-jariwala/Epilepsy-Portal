{"version":3,"sources":["convert-json-to-csv.js"],"names":["test","require","convertJsonToCsv","t","json","one","two","options","label","key","csv","is","default","wanted","unwanted","value"],"mappings":"AAAA;;;;AAEA,IAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,IAAMC,mBAAmBD,QAAQ,+BAAR,CAAzB;;AAEAD,KAAK,iCAAL,EAAwC,UAACG,CAAD,EAAO;AAAA;;AAC3C,QAAMC,OAAO,CACT;AACIC,aAAK,IADT;AAEIC,aAAK;AAFT,KADS,EAKT;AACID,aAAK,IADT;AAEIC,aAAK;AAFT,KALS,CAAb;;AAWA,QAAMC,UAAU,CACZ;AACIC,eAAO,WADX;AAEIC,aAAK;AAFT,KADY,EAKZ;AACID,eAAO,WADX;AAEIC,aAAK;AAFT,KALY,CAAhB;;AAWA,QAAMC,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,uBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,2CAAV,EAAuD,mDAAvD;AACH,CA1BD;;AA4BAV,KAAK,qCAAL,EAA4C,UAACG,CAAD,EAAO;AAAA;;AAC/C,QAAMC,OAAO,CACT;AACIC,aAAK;AADT,KADS,EAIT;AACIA,aAAK;AADT,KAJS,CAAb;;AASA,QAAME,UAAU,CACZ;AACIC,eAAO,OADX;AAEIC,aAAK;AAFT,KADY,CAAhB;;AAOA,QAAMC,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,6BAAV,EAAyC,wCAAzC;AACH,CApBD;;AAsBAV,KAAK,wCAAL,EAA+C,UAACG,CAAD,EAAO;AAAA;;AAClD,QAAMC,OAAO,CACT;AACIC,aAAK;AADT,KADS,EAIT,EAJS,EAKT;AACIA,aAAK;AADT,KALS,EAQT;AACIA,aAAK;AADT,KARS,CAAb;;AAaA,QAAME,UAAU,CACZ;AACIC,eAAO,KADX;AAEIC,aAAK,KAFT;AAGIG,iBAAS;AAHb,KADY,CAAhB;;AAQA,QAAMF,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,+CAAV,EAA2D,6CAA3D;AACH,CAzBD;;AA2BAV,KAAK,2BAAL,EAAkC,UAACG,CAAD,EAAO;AAAA;;AACrC,QAAMC,OAAO,CACT;AACIS,gBAAQ,SADZ;AAEIC,kBAAU;AAFd,KADS,EAKT;AACID,gBAAQ,UADZ;AAEIC,kBAAU;AAFd,KALS,CAAb;;AAWA,QAAMP,UAAU,CACZ;AACIC,eAAO,QADX;AAEIC,aAAK;AAFT,KADY,CAAhB;;AAOA,QAAMC,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,+BAAV,EAA2C,sCAA3C;AACH,CAtBD;;AAwBAV,KAAK,uBAAL,EAA8B,UAACG,CAAD,EAAO;AAAA;;AACjC,QAAMC,OAAO,CACT;AACIC,aAAK,SADT;AAEIC,aAAK;AAFT,KADS,EAKT;AACID,aAAK,SADT;AAEIC,aAAK;AAFT,KALS,CAAb;;AAWA,QAAMC,UAAU,CACZ;AACIC,eAAO,KADX;AAEIC,aAAK;AAFT,KADY,EAKZ;AACID,eAAO,KADX;AAEIC,aAAK;AAFT,KALY,CAAhB;;AAWA,QAAMC,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,mDAAV,EAA+D,6BAA/D;AACH,CA1BD;;AA4BAV,KAAK,+CAAL,EAAsD,UAACG,CAAD,EAAO;AAAA;;AACzD,QAAMC,OAAO,CACT;AACIW,eAAO;AADX,KADS,EAIT;AACIA,eAAO;AADX,KAJS,EAOT;AACIA,eAAO;AADX,KAPS,EAUT;AACIA,eAAO;AADX,KAVS,CAAb;;AAeA,QAAMR,UAAU,CACZ;AACIC,eAAO,OADX;AAEIC,aAAK;AAFT,KADY,CAAhB;;AAOA,QAAMC,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,iDAAV,EAA6D,kCAA7D;AACH,CA1BD;;AA4BAV,KAAK,6BAAL,EAAoC,UAACG,CAAD,EAAO;AAAA;;AACvC,QAAMC,OAAO,CACT;AACIW,eAAO;AADX,KADS,EAIT;AACIA,eAAO;AADX,KAJS,CAAb;;AASA,QAAMR,UAAU,CACZ;AACIC,eAAO,KADX;AAEIC,aAAK;AAFT,KADY,EAKZ;AACID,eAAO,KADX;AAEIC,aAAK;AAFT,KALY,CAAhB;;AAWA,QAAMC,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,mCAAV,EAA+C,4BAA/C;AACH,CAxBD;;AA0BAV,KAAK,oBAAL,EAA2B,UAACG,CAAD,EAAO;AAAA;;AAC9B,QAAMC,OAAO,EAAb;AACA,QAAMG,UAAU,EAAhB;;AAEA,QAAMG,MAAMR,iBAAiBE,IAAjB,EAAuBG,OAAvB,CAAZ;;AAEAJ,MAAEQ,EAAF,yBAAKD,GAAL;AAAA;AAAA;AAAA;AAAA,QAAU,IAAV,EAAgB,oBAAhB;AACH,CAPD","file":"convert-json-to-csv.js","sourcesContent":["'use strict';\n\nconst test = require('ava');\nconst convertJsonToCsv = require('../helper/convert-json-to-csv');\n\ntest('when there is a label and a key', (t) => {\n    const json = [\n        {\n            one: 'a1',\n            two: 'b1'\n        },\n        {\n            one: 'a2',\n            two: 'b2'\n        }\n    ];\n\n    const options = [\n        {\n            label: 'example 1',\n            key: 'one'\n        },\n        {\n            label: 'example 2',\n            key: 'two'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'example 1,example 2\\n\"a1\",\"b1\"\\n\"a2\",\"b2\"', 'it should have the labels and the values in order');\n});\n\ntest('when there are commas in the values', (t) => {\n    const json = [\n        {\n            one: 'a,b,c,,'\n        },\n        {\n            one: ',,,,,,,'\n        }\n    ];\n\n    const options = [\n        {\n            label: 'value',\n            key: 'one'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'value\\n\"a,b,c,,\"\\n\",,,,,,,\"', 'it should wrap values in double quotes');\n});\n\ntest('when there are missing or falsy values', (t) => {\n    const json = [\n        {\n            one: null\n        },\n        {},\n        {\n            one: false\n        },\n        {\n            one: 'value'\n        }\n    ];\n\n    const options = [\n        {\n            label: 'one',\n            key: 'one',\n            default: 'default'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'one\\n\"default\"\\n\"default\"\\n\"default\"\\n\"value\"', 'it should replace falsy values with default');\n});\n\ntest('when columns are filtered', (t) => {\n    const json = [\n        {\n            wanted: 'value 1',\n            unwanted: 'value 2'\n        },\n        {\n            wanted: 'string 1',\n            unwanted: 'string 2'\n        }\n    ];\n\n    const options = [\n        {\n            label: 'column',\n            key: 'wanted'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'column\\n\"value 1\"\\n\"string 1\"', 'it should keep only requested column');\n});\n\ntest('when order is changed', (t) => {\n    const json = [\n        {\n            one: 'one one',\n            two: 'two one'\n        },\n        {\n            one: 'one two',\n            two: 'two two'\n        }\n    ];\n\n    const options = [\n        {\n            label: 'two',\n            key: 'two'\n        },\n        {\n            label: 'one',\n            key: 'one'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'two,one\\n\"two one\",\"one one\"\\n\"two two\",\"one two\"', 'it should keep option order');\n});\n\ntest('when different different value types are used', (t) => {\n    const json = [\n        {\n            value: 'string'\n        },\n        {\n            value: 1\n        },\n        {\n            value: true\n        },\n        {\n            value: {}\n        }\n    ];\n\n    const options = [\n        {\n            label: 'value',\n            key: 'value'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'value\\n\"string\"\\n\"1\"\\n\"true\"\\n\"[object Object]\"', 'it should display all primitives');\n});\n\ntest('when a column is duplicated', (t) => {\n    const json = [\n        {\n            value: 'one'\n        },\n        {\n            value: 'two'\n        }\n    ];\n\n    const options = [\n        {\n            label: 'one',\n            key: 'value'\n        },\n        {\n            label: 'two',\n            key: 'value'\n        }\n    ];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, 'one,two\\n\"one\",\"one\"\\n\"two\",\"two\"', 'it should duplicate column');\n});\n\ntest('when json is empty', (t) => {\n    const json = [];\n    const options = [];\n\n    const csv = convertJsonToCsv(json, options);\n\n    t.is(csv, '\\n', 'it should be empty');\n});\n"]}